# ==== Purpose ====
#
# Test that replica behaves well in some conflict situations.  The
# following are tested:
#
# - The replica SQL thread sees an 'INSERT' of a row with a key that
#   already exists in the table;
#
# - The replica SQL thread sees a 'DELETE' of a row that does not
#   exist in the table.
#
# In statement-logging mode, the first conflict type causes the replica
# to stop with an error and the second conflict is ignored.
#
# In row-logging mode, the replica behavior depends the value of
# @@replica_exec_mode on the replica: if @@replica_exec_mode is IDEMPOTENT,
# the replica should ignore the conflicting statement and continue
# normally.  If @@replica_exec_mode is STRICT, the replica should stop
# with an error.
#
# This test was previously named rpl_stm_mystery22/rpl_row_mystery22.
#
#
# ==== Method ====
#
# Create a table on primary and replica, insert a row on replica, and
# insert the same row on primary.
#
# Create a table on primary and replica, insert a row on primary with
# binlogging turned off, and remove the row on primary with binlogging
# turned on.
#
#
# ==== Related bugs ====
#
# BUG#31552: Replication breaks when deleting rows from out-of-sync table without PK
# BUG#31609: Not all RBR replica errors reported as errors
#
# Bug in this test case:
# BUG#37718: rpl.rpl_stm_mystery22 fails sporadically on pushbuild
#
#
# ==== Usage ====
#
# This file assumes the following:
#
# - The test language variable $replica_is_idempotent is set to 1 if the
#   replica is expected to stop on duplicate key errors (i.e., if the
#   binlog is in statement mode or
#   @@global.replica_exec_mode=STRICT). It is set to 0 otherwise.
#
# - Replication has been initialized by include/primary-replica.inc
#
# - The test adds a suppression for the following warning:
#    Replica: Can't find record in 't1' Error_code: 1032


--echo ==== Initialize ====

--echo [on primary]
connection primary;
CREATE TABLE t1(a INT PRIMARY KEY);
--echo [on replica]
--source include/sync_replica_sql_with_primary.inc

--echo ==== Test: SQL thread sees 'INSERT' of existing key ====

--echo ---- Prepare replica so that it will get duplicate key error ----
# This row will be in the way of the row inserted by primary.
INSERT INTO t1 VALUES (1);

--echo ---- Insert rows on primary ----
--echo [on primary]
connection primary;
# Insert the same row on primary
INSERT INTO t1 VALUES (1);
save_primary_pos;
SELECT * FROM t1;

--echo [on replica]
connection replica;

# If we are statement-logging or if replica_exec_mode=STRICT, we now
# expect to see an error on the replica.  Otherwise (i.e., we are
# row-logging and replica_exec_mode=IDEMPOTENT), we expect that the
# duplicate row is ignored by the replica and replication continues.
if (`SELECT @@global.binlog_format != 'ROW' OR @@global.replica_exec_mode = 'STRICT'`) {
  --echo ---- Wait until replica stops with an error ----
  # Wait until the replica tries to run the query, fails with duplicate
  # key error, and stops the SQL thread.

  let $replica_sql_errno= convert_error(ER_DUP_ENTRY);
  source include/wait_for_replica_sql_error.inc;
  --let $errno= query_get_value("SHOW REPLICA STATUS", Last_SQL_Errno, 1)
  --eval SELECT "$errno" as 'Last_SQL_Errno'

  call mtr.add_suppression("Replica SQL.*Duplicate entry .1. for key .PRIMARY.* Error_code: 1062");
  call mtr.add_suppression("The replica coordinator and worker threads are stopped, possibly leaving data in inconsistent state");

  SELECT * FROM t1;

  --echo ---- Resolve the conflict on the replica and restart SQL thread ----
  DELETE FROM t1 WHERE a = 1;
  START REPLICA SQL_THREAD;
  source include/wait_for_replica_sql_to_start.inc;
}

--echo ---- Sync replica and verify that there is no error ----
sync_with_primary;
--source include/check_replica_no_error.inc
SELECT * FROM t1;


--echo ==== Test: SQL thread sees 'DELETE' of non-existing row ====

--echo ---- On primary, insert two rows, the second with binlogging off ----
--echo [on primary]
connection primary;
DELETE FROM t1;
INSERT INTO t1 VALUES (1);

--echo [on replica]
--source include/sync_replica_sql_with_primary.inc
DELETE FROM t1 WHERE a = 1;

--echo ---- On primary, remove the row that does not exist on replica ----
--echo [on primary]
connection primary;
DELETE FROM t1 WHERE a = 1;
SELECT * FROM t1;
save_primary_pos;

--echo [on replica]
connection replica;

# If we are row-logging and replica_exec_mode is STRICT, we now expect
# an error since the row to delete does not exist on replica.  Otherwise
# (i.e., either we are statement-logging or replica_exec_mode is
# IDEMPOTENT), the absence of the row to delete is ignored and
# replication continues.
if (`SELECT @@global.binlog_format = 'ROW' AND @@global.replica_exec_mode = 'STRICT'`) {
  --echo ---- Wait until replica stops with an error ----
  call mtr.add_suppression("Replica SQL.*Can.t find record in .t1., Error_code: 1032");

  let $replica_sql_errno= convert_error(ER_KEY_NOT_FOUND);
  source include/wait_for_replica_sql_error.inc;
  --let $errno= query_get_value("SHOW REPLICA STATUS", Last_SQL_Errno, 1)
  --eval SELECT "$errno" as 'Last_SQL_Errno'

  SELECT * FROM t1;

  --echo ---- Resolve the conflict on the replica and restart SQL thread ----
  INSERT INTO t1 VALUES (1);
  START REPLICA SQL_THREAD;
  source include/wait_for_replica_sql_to_start.inc;
}

--echo ---- Sync replica and verify that there is no error ----
# The replica should sync ok, and SHOW REPLICA STATUS should give no
# error.
sync_with_primary;
--source include/check_replica_no_error.inc
SELECT * FROM t1;


--echo ==== Clean up ====

--echo [on primary]
connection primary;
DROP TABLE t1;

--echo [on replica]
--source include/sync_replica_sql_with_primary.inc
