# Testcase for import/export partition table with replication for InnoDB
# Only hash partition table is used for sanity check
--source include/have_innodb.inc
--source include/have_partition.inc
--source include/primary-replica.inc

--disable_warnings
DROP TABLE IF EXISTS t1;
--enable_warnings

# Set file per table on replica
--echo # On replica
connection replica;
let $replica_per_table = `select @@innodb_file_per_table`;
set global innodb_file_per_table = 1;

--echo # On primary
# Set file per table on primary
connection primary;
LET $MYSQLD_DATA_DIR = `select @@datadir`;
let $primary_per_table = `select @@innodb_file_per_table`;
set global innodb_file_per_table = 1;
LET $MYSQLD_PRIMARY_DATA_DIR = `select @@datadir`;
--echo # Create partitioned table on primary
CREATE TABLE t1 ( i INT ) ENGINE = InnoDB  PARTITION BY HASH(i) PARTITIONS 3;
CREATE TABLE t2 ( i INT ) ENGINE = InnoDB  PARTITION BY KEY(i) PARTITIONS 3;
INSERT INTO t1 VALUES (1),(111),(321);
INSERT INTO t2 VALUES (0),(1),(2);
FLUSH TABLES t1,t2 FOR EXPORT;
--source include/sync_replica_sql_with_primary.inc

--echo # set MYSQLD_DATADIR with primary datadir to copy idb and cfg files
LET MYSQLD_DATADIR = $MYSQLD_PRIMARY_DATA_DIR;
perl;
do 'include/innodb-util.inc';
ib_backup_tablespaces("test", "t1#P#p0", "t1#P#p1", "t1#P#p2");
ib_backup_tablespaces("test", "t2#P#p0", "t2#P#p1");
EOF

--echo # On replica
connection replica;
--echo # check table created on replica
SELECT * FROM t1;
SELECT * FROM t2;

--echo # On primary
--echo # DISCARD TABLESPACE on primary.It will be also discarded from replica.
connection primary;
UNLOCK TABLES;
ALTER TABLE t1 DISCARD TABLESPACE;
#--source include/sync_replica_sql_with_primary.inc
ALTER TABLE t2 DISCARD PARTITION p0,p1 TABLESPACE;
--source include/sync_replica_sql_with_primary.inc

--echo # Copy back ibd and cfg files on primary
LET MYSQLD_DATADIR = $MYSQLD_PRIMARY_DATA_DIR;
perl;
do 'include/innodb-util.inc';
ib_discard_tablespaces("test", "t1#P#p0", "t1#P#p1", "t1#P#p2");
ib_restore_tablespaces("test", "t1#P#p0", "t1#P#p1", "t1#P#p2");
ib_discard_tablespaces("test", "t2#P#p0", "t2#P#p1");
ib_restore_tablespaces("test", "t2#P#p0", "t2#P#p1");
EOF

--echo # Copy back ibd and cfg files on replica
connection replica;
LET $MYSQLD_REPLICA_DATA_DIR = `select @@datadir`;
LET MYSQLD_DATADIR = $MYSQLD_REPLICA_DATA_DIR;
perl;
do 'include/innodb-util.inc';
ib_discard_tablespaces("test", "t1#P#p0", "t1#P#p1", "t1#P#p2");
ib_restore_tablespaces("test", "t1#P#p0", "t1#P#p1", "t1#P#p2");
ib_discard_tablespaces("test", "t2#P#p0", "t2#P#p1");
ib_restore_tablespaces("test", "t2#P#p0", "t2#P#p1");
EOF

--echo # IMPORT TABLESPACE on primary.It will be also imported on replica.
connection primary;
ALTER TABLE t1 IMPORT TABLESPACE;
SELECT * FROM t1;
ALTER TABLE t2 IMPORT PARTITION p0,p1 TABLESPACE;
SELECT * FROM t2;
--source include/sync_replica_sql_with_primary.inc

--echo # On replica
--echo # Verify table data on replica
connection replica;
SELECT * FROM t1;
SELECT * FROM t2;



# Cleanup
connection replica;
eval set global innodb_file_per_table = $replica_per_table;
connection primary;
eval set global innodb_file_per_table = $primary_per_table;
DROP TABLE t1;
DROP TABLE t2;
--source include/rpl_end.inc

call mtr.add_suppression("Got error -1 when reading table '.*'");
call mtr.add_suppression("InnoDB: Error: tablespace id and flags in file '.*'.*");
call mtr.add_suppression("InnoDB: The table .* doesn't have a corresponding tablespace, it was discarded");

--remove_files_wildcard $MYSQLTEST_VARDIR/tmp t1*.ibd
--remove_files_wildcard $MYSQLTEST_VARDIR/tmp t1*.cfg
