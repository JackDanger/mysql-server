--source include/have_ndb.inc
--source include/have_binlog_format_mixed_or_row.inc
--source suite/ndb_rpl/ndb_primary-replica.inc

#
# Simple test to check that replica_allow_batching has at least a /2 effect
# on round trips.
# Further testing could be added in the areas of
#  - Correlation of batch size to data written
#  - Replica batching and Blobs
#  - Replica batching and hidden/autoinc keys
#  - Batching within a multi-image event with 
#    replica_allow_batching=OFF
#

--connection primary

use test;

--echo Create a couple of tables to defeat Binlog Injector's
--echo creation of multi-image events which can be batch-applied
--echo on the replica regardless of replica_allow_batching

create table t1 (pk int primary key, a varchar(8000)) engine=ndb;
create table t2 (pk int primary key, a varchar(8000)) engine=ndb;

--echo Insert some data which we can later delete
--echo This also serves to 'prime' the Replica, so that NdbApi
--echo access related to replica setup (last_replicated_epoch fetch etc)
--echo can be ignored.

insert into t1 values (1, repeat("I", 80)), (2, repeat("R", 80));

--sync_replica_with_primary

--echo First pass with replica_allow_batching OFF
--connection replica
set global replica_allow_batching=OFF;
show variables like 'replica_allow_batching';
#show status like 'ndb_api%replica';
--source ndb_replica_exec_info_init.inc

--connection primary

--echo Check out batching
--echo Transaction includes deletes + inserts, and
--echo two different tables, shouldn't be entirely batchable
--echo without replica_allow_batching

begin;
  delete from t1;
  insert into t1 values (3, repeat("I", 80)), (4, repeat("F", 80));
  insert into t2 values (5, repeat("B", 90)), (6, repeat("E", 90));
commit;

--sync_replica_with_primary
--connection replica

#show status like 'ndb_api%replica';

--disable_query_log
--disable_result_log
SELECT @start_exec_count:=@init_wait_exec_complete_count_replica;
SELECT @start_pk_op_count:=@init_pk_op_count_replica;
--enable_result_log
--enable_query_log

--source ndb_replica_exec_info_init.inc

--disable_query_log
--disable_result_log
SELECT @batching_off_execs:=@init_wait_exec_complete_count_replica - @start_exec_count AS 'Exec_count';
SELECT @batching_off_pk_ops:=@init_pk_op_count_replica - @start_pk_op_count AS 'Pk_op_count';
--enable_result_log
--enable_query_log

--connection primary
delete from t1;
delete from t2;
insert into t1 values (1, repeat("I", 80)), (2, repeat("R", 80));

--sync_replica_with_primary
--connection replica
--echo Second pass with replica_allow_batching ON
set global replica_allow_batching=ON;
show variables like 'replica_allow_batching';
#show status like 'ndb_api%replica';
--source ndb_replica_exec_info_init.inc

--connection primary

--echo Check out batching
--echo Transaction includes deletes + inserts, and
--echo two different tables, shouldn't be batchable
--echo without replica_allow_batching

begin;
  delete from t1;
  insert into t1 values (3, repeat("I", 80)), (4, repeat("F", 80));
  insert into t2 values (5, repeat("B", 90)), (6, repeat("E", 90));
commit;

--sync_replica_with_primary
--connection replica

#show status like 'ndb_api%replica';

--echo Determine replica activity in terms of PK ops and execute() calls
--disable_query_log
--disable_result_log
SELECT @start_exec_count:=@init_wait_exec_complete_count_replica;
SELECT @start_pk_op_count:=@init_pk_op_count_replica;
--enable_result_log 
--enable_query_log

--source ndb_replica_exec_info_init.inc

--disable_query_log
--disable_result_log
SELECT @batching_on_execs:=@init_wait_exec_complete_count_replica - @start_exec_count AS 'Exec_count';
SELECT @batching_on_pk_ops:=@init_pk_op_count_replica - @start_pk_op_count AS 'Pk_op_count';
--enable_result_log 
--enable_query_log

--echo Check that test compared like-for-like, and that replica_allow_batching
--echo came out ahead by a factor of at least 2.
SELECT @batching_on_pk_ops = @batching_off_pk_ops AS 'Fair contest';
SELECT @batching_off_pk_ops >=4 as 'Batching can improve matters';
SELECT @batching_on_execs * 2 < @batching_off_execs AS 'replica_allow_batching works';

--echo Cleanup
--connection primary
drop table t2;
drop table t1;
--sync_replica_with_primary
--connection primary

--source include/rpl_end.inc
