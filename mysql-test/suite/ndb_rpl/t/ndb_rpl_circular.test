# The include statement below is a temp one for tests that are yet to
#be ported to run with InnoDB,
#but needs to be kept for tests that would need MyISAM in future.
--source include/force_myisam_default.inc

--source include/have_ndb.inc

# set up circular replication
--let $rpl_topology= 1->2->1
--source include/rpl_init.inc

--let $rpl_connection_name= primary
--let $rpl_server_number= 1
--source include/rpl_connect.inc

--let $rpl_connection_name= replica
--let $rpl_server_number= 2
--source include/rpl_connect.inc


# create the table on the "replica"
--connection replica
CREATE TABLE t1 (a int key, b int) ENGINE=ndb;
#CREATE TABLE t2 (a int key, b int) ENGINE=ndb;
sync_replica_with_primary primary;
# now we should have a table on the primary as well
SHOW TABLES;

# insert some values on the replica and primary
--connection primary
INSERT INTO t1 VALUES (1,2);
# Give time to propagate + close epoch, to ensure deterministic Binlog contents
--sleep 1
--connection replica
INSERT INTO t1 VALUES (2,3);

# ensure data has propagated both ways
--connection replica
sync_replica_with_primary primary;
--sync_replica_with_primary

# connect to replica and ensure data it there.
--connection replica
SELECT * FROM t1 ORDER BY a;
#SELECT * FROM t2 ORDER BY a;

# Check replica has no errors and are running
--source include/check_replica_no_error.inc
--source include/check_replica_is_running.inc

--echo Replica Binlog contains all ops as log_replica_updates is on
show variables like 'server_id';
show variables like 'log_bin';
show variables like 'log_replica_updates';
--source include/show_binlog_events.inc

source include/check_replica_is_running.inc;
# connect to primary and ensure data it there.
--connection primary
SELECT * FROM t1 ORDER BY a;
#SELECT * FROM t2 ORDER BY a;
source include/check_replica_is_running.inc;

--echo Primary Binlog contains only Primary ops as log_replica_updates is off
show variables like 'server_id';
show variables like 'log_bin';
show variables like 'log_replica_updates';
--source include/show_binlog_events.inc

# stop replication on "primary" as not to replicate
# shutdown circularly, eg drop table
--connection primary
STOP REPLICA;

# cleanup
--connection primary
DROP TABLE t1;
-- sync_replica_with_primary

# Test ndb_log_apply_status option

--connection primary
start replica;
create table t1 (a int primary key, b int) engine=ndb;
show variables like '%log_orig%';

--echo 'Primary' has only replica's serverid entry 
select server_id, log_name from mysql.ndb_apply_status order by server_id;

set global ndb_log_apply_status=On;
show variables like 'ndb_log_apply_status';

--connection replica
--echo 'Replica' has only Primary's serverid entry
select server_id, log_name from mysql.ndb_apply_status order by server_id;
--echo 'Replica' has following ndb_binlog_index entries
select inserts, updates, deletes, schemaops, orig_server_id from mysql.ndb_binlog_index order by position;

set global ndb_log_apply_status=On;
show variables like 'ndb_log_apply_status';

--connection primary

stop replica;
insert into t1 values (1,1);
--sync_replica_with_primary

--connection replica
--echo 'Replica' still has only Primary's serverid entry
select server_id, log_name from mysql.ndb_apply_status order by server_id;

--disable_result_log
--source include/wait_for_ndb_committed_to_binlog.inc
--enable_result_log
--echo 'Replica' has following ndb_binlog_index entries
select inserts, updates, deletes, schemaops, orig_server_id from mysql.ndb_binlog_index order by position;

--connection primary
--echo 'Primary' still has only Replica's serverid entry
select server_id, log_name from mysql.ndb_apply_status order by server_id;

start replica;
--connection replica 
--sync_replica_with_primary primary

--connection primary
--echo 'Primary' now has own serverid entry as well.
select server_id, log_name from mysql.ndb_apply_status order by server_id;

--connection replica
--echo 'Replica' still only has 'Primary''s serverid entry
select server_id, log_name from mysql.ndb_apply_status order by server_id;
--echo Now create event originating at Replica
insert into t1 values (2,2);
--sync_replica_with_primary primary

--connection primary
--sync_replica_with_primary replica

--connection replica
--echo 'Replica' now also has its own serverid entry
select server_id, log_name from mysql.ndb_apply_status order by server_id;


--connection primary
stop replica;
set global ndb_log_apply_status=off;

--connection replica
set global ndb_log_apply_status=off;
stop replica;

drop table t1;

--connection primary

drop table t1;

--let $rpl_only_running_threads= 1
--source include/rpl_end.inc
