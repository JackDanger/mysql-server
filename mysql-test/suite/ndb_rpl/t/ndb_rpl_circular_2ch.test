# The include statement below is a temp one for tests that are yet to
#be ported to run with InnoDB,
#but needs to be kept for tests that would need MyISAM in future.
--source include/force_myisam_default.inc

#############################################################
# Author:  Serge Kozlov <skozlov@mysql.com>
# Date:    03/17/2008
# Purpose: Testing cluster circular replication based on two
# independent channels between two clusters
#############################################################
--source include/have_ndb.inc
--source suite/ndb_rpl/ndb_primary-replica_2ch.inc
--source include/have_binlog_format_mixed_or_row.inc
--echo

# Check server_id and set auto_increment_* variables
--echo *** Check server_id of mysqld servers ***
--connection primary
SHOW VARIABLES LIKE "server_id";
SET auto_increment_offset = 1;
SET auto_increment_increment = 2;
--connection primary1
SHOW VARIABLES LIKE "server_id";
SET auto_increment_offset = 1;
SET auto_increment_increment = 2;
--connection replica
SHOW VARIABLES LIKE "server_id";
SET auto_increment_offset = 2;
SET auto_increment_increment = 2;
--connection replica1
SHOW VARIABLES LIKE "server_id";
SET auto_increment_offset = 2;
SET auto_increment_increment = 2;
--echo

# Preparing data.
--echo *** Preparing data ***
--connection primary
CREATE TABLE t1 (a INT NOT NULL AUTO_INCREMENT, b VARCHAR(100), c INT NOT NULL, PRIMARY KEY(a)) ENGINE=ndb;

let $wait_binlog_event= CREATE TABLE t1;
--source include/wait_for_binlog_event.inc
--connection primary1
--source include/wait_for_binlog_event.inc
--connection replica
--source include/wait_for_binlog_event.inc
--connection replica1
--source include/wait_for_binlog_event.inc
--echo

#
# Testing
#

--echo *** Basic testing  ***
# insert data via all hosts
--echo Insert rows via all hosts
--disable_query_log
let $counter= 10;
while ($counter) {
 --connection primary
 INSERT INTO t1(b,c) VALUES('primary',1);
 --connection primary1
 INSERT INTO t1(b,c) VALUES('primary1',1);
 --connection replica
 INSERT INTO t1(b,c) VALUES('replica',1);
 --connection replica1
 INSERT INTO t1(b,c) VALUES('replica1',1);
 dec $counter;
}
--connection primary
--enable_query_log

# Wait replication between clusters
let $wait_condition= SELECT COUNT(*)=40 FROM t1 WHERE c = 1;
--source include/wait_condition.inc
--connection replica
--source include/wait_condition.inc

# Check data
--echo Check data on both clusters 
let $diff_tables= primary:t1, replica:t1;
source include/diff_tables.inc;

--echo *** Transaction testing ***
# Start transaction for one mysqld and do mass of inserts for other.
# Do it for for both clusters

--connection primary
BEGIN;
--connection replica1
BEGIN;
let $counter= 100;
--connection primary
--disable_query_log
while ($counter) {
 --connection primary
 INSERT INTO t1(b,c) VALUES('primary',2);
 --connection primary1
 INSERT INTO t1(b,c) VALUES('primary1',2);
 --connection replica
 INSERT INTO t1(b,c) VALUES('replica',2);
 --connection replica1
 INSERT INTO t1(b,c) VALUES('replica1',2);
 dec $counter;
}
--connection primary
--enable_query_log
COMMIT;
--connection replica1
COMMIT;

# Wait replication between clusters
--connection primary
let $wait_condition= SELECT COUNT(*)=400 FROM t1 WHERE c = 2;
--source include/wait_condition.inc
--connection replica
--source include/wait_condition.inc

--echo Check data on both clusters 
let $diff_tables= primary:t1, replica:t1;
source include/diff_tables.inc;

# Start transaction and then roll back

--connection primary
BEGIN;
--connection replica1
BEGIN;
let $counter= 100;
--connection primary
--disable_query_log
while ($counter) {
 --connection primary
 INSERT INTO t1(b,c) VALUES('primary',3);
 --connection primary1
 INSERT INTO t1(b,c) VALUES('primary1',3);
 --connection replica
 INSERT INTO t1(b,c) VALUES('replica',3);
 --connection replica1
 INSERT INTO t1(b,c) VALUES('replica1',3);
 dec $counter;
}
--connection primary
--enable_query_log
ROLLBACK;
--connection replica1
ROLLBACK;

# Wait replication between clusters
--connection primary
let $wait_condition= SELECT COUNT(*)=200 FROM t1 WHERE c = 3;
--source include/wait_condition.inc
--connection replica
--source include/wait_condition.inc

--echo Check data on both clusters 
let $diff_tables= primary:t1, replica:t1;
source include/diff_tables.inc;

# Clean up
--connection primary
DROP TABLE IF EXISTS t1;
--connection replica
# Wait until table is dropped on replica.
--let $query= SELECT COUNT(*) FROM t1
--source include/wait_for_query_to_fail.inc
--echo

--connection primary

# End of test 5.1
--source suite/ndb_rpl/ndb_primary-replica_2ch_end.inc

