# The include statement below is a temp one for tests that are yet to
#be ported to run with InnoDB,
#but needs to be kept for tests that would need MyISAM in future.
--source include/force_myisam_default.inc

--source include/have_ndb.inc
--source suite/ndb_rpl/ndb_primary-replica_2ch.inc
--source include/have_binlog_format_mixed_or_row.inc

#
# Test that the Maximum replicated epoch is maintained
# as expected in a circular, 2 channel configuration.
# The channels are swapped, and replication is restarted
# The MaxReplicatedEpoch is reloaded from ndb_apply_status
# for the Servers considered local (IGNORE_SERVER_IDS)
#
--connection primary
--echo Cluster A servers have no epoch replication info
select count(1) from mysql.ndb_apply_status;

--echo Cluster A servers have no max replicated epoch value
--echo Primary(1)
select variable_name, variable_value from information_schema.global_status
  where variable_name='Ndb_replica_max_replicated_epoch';
--connection primary1
--echo Primary1(3)
select variable_name, variable_value from information_schema.global_status
  where variable_name='Ndb_replica_max_replicated_epoch';

--echo Make a change originating at Cluster A
--connection primary
--echo Primary(1)
use test;
create table t1 (a int primary key, b varchar(100)) engine=ndb;
insert into t1 values (1, "Venice");

--echo Allow it to propagate to Cluster B
--sync_replica_with_primary replica

--echo Originate a second unrelated change at Cluster B, to allow us to wait for
--echo reverse propagation in the testcase
--connection replica1
--echo Replica1 (4)
insert into t1 values (2, "Death");

--echo Allow it to propagate to Cluster A
--sync_replica_with_primary primary1

--echo Observe new entry in ndb_apply_status on Cluster A
--connection primary
--echo Primary (1)
select server_id from mysql.ndb_apply_status order by server_id;

--echo Non-replica server on Cluster A will have no value for Max Replicated Epoch
select variable_name, variable_value from information_schema.global_status
  where variable_name='Ndb_replica_max_replicated_epoch';

--echo Replica server on Cluster A has current value for Max Replicated Epoch
--connection primary1
--echo Primary1 (3)
--echo Expect count 1
# Here we join the max rep epoch with ndb_apply_status for server id 1
# (Our site's current primary server)
select
    count(1)
  from
    information_schema.global_status,
    mysql.ndb_apply_status
  where
    server_id = 1
    and
    variable_name='Ndb_replica_max_replicated_epoch'
    and
    variable_value = epoch;

--echo Now wait for all replication to quiesce

# Ensure that already replica-applied events from Cluster B 
# are in-binlog before allowing the switchover. 
# Otherwise we can setup replication from a binlog
# pos before the already-applied events.
# Symptom is that we get an extra ndb_apply_status line
# for server_id 3.
#
--source include/wait_for_ndb_committed_to_binlog.inc

--echo Now swap replication channels around
--source include/rpl_stop_replicas.inc
--let $rpl_topology= 2->1,3->4
--source include/rpl_change_topology.inc

# We've changed the direction, but need to set binlog filenames
# and positions

#
# 'Normally' we should use the ndb_apply_status max applied epoch,
# then lookup ndb_binlog_index etc.
# However, in this case (and probably in lots of real cases), no changes
# have been made after the last applied epoch, so there is no epoch
# after the current one, and therefore no entry in ndb_binlog_index
# to get the correct position from.
# We could just re-apply the last epoch applied, but that's imprecise,
# and causes us to create an ndb_apply_status entry for Server 3 when
# it has not really been primary for those changes.
# So we just look at the Primary status instead.
#
#--echo Get max applied epochs from a server on each cluster
#--connection replica
#let $max_applied_cluster_a_epoch = query_get_value("SELECT MAX(epoch) AS epoch FROM mysql.ndb_apply_status WHERE server_id IN (1,3)", epoch, 1);
#--connection primary
#let $max_applied_cluster_b_epoch = query_get_value("SELECT MAX(epoch) AS epoch FROM mysql.ndb_apply_status WHERE server_id IN (2,4)", epoch, 1);
#
#--echo Get corresponding Binlog filename + pos from new Primary servers
#--connection primary1
#eval select * from mysql.ndb_binlog_index where epoch > $max_applied_cluster_a_epoch ;
#let $cluster_a_primary_log_file = query_get_value("SELECT SUBSTRING_INDEX(File, '/', -1) as File from mysql.ndb_binlog_index WHERE epoch >= $max_applied_cluster_a_epoch", File, 1);
#let $cluster_a_primary_log_pos = query_get_value("SELECT Position from mysql.ndb_binlog_index WHERE epoch >= $max_applied_cluster_a_epoch", Position, 1);
#--connection replica
#eval select * from mysql.ndb_binlog_index where epoch > $max_applied_cluster_b_epoch;
#let $cluster_b_primary_log_file = query_get_value("SELECT SUBSTRING_INDEX(File, '/', -1) as File from mysql.ndb_binlog_index WHERE epoch >= $max_applied_cluster_b_epoch", File, 1);
#let $cluster_b_primary_log_pos = query_get_value("SELECT Position from mysql.ndb_binlog_index WHERE epoch >= $max_applied_cluster_b_epoch", Position, 1);
#--echo Now change new Replica servers to new Primary file + pos
#--connection primary
#--echo Changing primary to $cluster_b_primary_log_file, $cluster_b_primary_log_pos
#eval CHANGE PRIMARY TO PRIMARY_LOG_FILE="$cluster_b_primary_log_file", PRIMARY_LOG_POS=$cluster_b_primary_log_pos;
#--connection replica1
#--echo Changing primary to $cluster_a_primary_log_file, $cluster_a_primary_log_pos
#eval CHANGE PRIMARY TO PRIMARY_LOG_FILE="$cluster_a_primary_log_file", PRIMARY_LOG_POS=$cluster_a_primary_log_pos;

--echo Get current primary status on Cluster A new primary (next pos in Binlog)
--connection primary1
--echo Primary1 (3)
--echo Flush logs to ensure any pending update (e.g. reflected apply_status write row)
--echo is skipped over.
flush logs;
let $cluster_a_primary_log_file = query_get_value("SHOW PRIMARY STATUS", "File", 1);
let $cluster_a_primary_log_pos = query_get_value("SHOW PRIMARY STATUS", "Position", 1);
--echo Setup replica on Cluster B to use it
--connection replica1
--echo Replica1 (4)
--disable_query_log
eval CHANGE PRIMARY TO PRIMARY_LOG_FILE="$cluster_a_primary_log_file", PRIMARY_LOG_POS=$cluster_a_primary_log_pos;
--enable_query_log

--echo Get current primary status on Cluster B new primary (next pos in Binlog)
--connection replica
--echo Replica (2)
--echo  Flush logs to ensure any pending update (e.g. reflected apply_status write row)
--echo is skipped over.
flush logs;
let $cluster_b_primary_log_file = query_get_value("SHOW PRIMARY STATUS", "File", 1);
let $cluster_b_primary_log_pos = query_get_value("SHOW PRIMARY STATUS", "Position", 1);
--echo Setup replica on Cluster A to use it
--connection primary
--echo Primary (1)
--disable_query_log
eval CHANGE PRIMARY TO PRIMARY_LOG_FILE="$cluster_b_primary_log_file", PRIMARY_LOG_POS=$cluster_b_primary_log_pos;
--enable_query_log

--connection primary
--echo Primary (1)
--echo Show that Cluster A Replica server (old primary) has no Max replicated epoch before receiving data
select variable_name, variable_value from information_schema.global_status
  where variable_name='Ndb_replica_max_replicated_epoch';

--connection primary1
--echo Primary1 (3)
--echo Cluster A Primary server (old replica) has old Max replicated epoch
select
    count(1)
  from
    information_schema.global_status,
    mysql.ndb_apply_status
  where
    server_id = 1
    and
    variable_name='Ndb_replica_max_replicated_epoch'
    and
    variable_value = epoch;

--echo Now start replicas up
--source include/rpl_start_replicas.inc

--echo Show that applying something from Cluster B causes the
--echo old Max Rep Epoch to be loaded from ndb_apply_status
--echo There is no new Max Rep Epoch from Cluster A as it has not changed
--echo anything yet

--connection replica
--echo Replica (2)
insert into test.t1 values (3, "From the Sea");

--echo Allow to propagate to Cluster A
--sync_replica_with_primary primary

--connection primary
--echo Primary (1)
--echo New Replica server on Cluster A has loaded old Max-Replicated-Epoch
select server_id from mysql.ndb_apply_status order by server_id;
select
    @result:=count(1)
  from
    information_schema.global_status,
    mysql.ndb_apply_status
  where
    server_id = 1
    and
    variable_name='Ndb_replica_max_replicated_epoch'
    and
    variable_value = epoch;

# BEGIN TRANSIENT FAILURE DEBUGGING
--disable_query_log
--disable_result_log

--let $res=query_get_value("SELECT @result AS r", r, 1)

if (!$res)
{
  --echo I GOT PROBLEMS
  --echo IF IN DOUBT, USE BRUTE FORCE
  --enable_result_log
  show variables like 'server_id';
  show status like 'Ndb_replica_max_replicated_epoch';
  select * from mysql.ndb_apply_status order by server_id;
  select * from mysql.ndb_binlog_index;
  SHOW REPLICA STATUS;
  SHOW BINARY LOGS;
  SHOW BINLOG EVENTS IN 'primary-bin.000001';
#  SHOW BINLOG EVENTS IN 'primary-bin.000002';
  let $MYSQLD_DATADIR= `select @@datadir;`;
  --exec $MYSQL_BINLOG --verbose $MYSQLD_DATADIR/primary-bin.000001
#  --exec $MYSQL_BINLOG --verbose $MYSQLD_DATADIR/primary-bin.000002
  --connection primary1
  show variables like 'server_id';
  show status like 'Ndb_replica_max_replicated_epoch';
  select * from mysql.ndb_apply_status order by server_id;
  select * from mysql.ndb_binlog_index;
  SHOW REPLICA STATUS;
  SHOW BINARY LOGS;
  SHOW BINLOG EVENTS IN 'primary-bin.000001';
  SHOW BINLOG EVENTS IN 'primary-bin.000002';
  let $MYSQLD_DATADIR= `select @@datadir;`;
  --exec $MYSQL_BINLOG --verbose $MYSQLD_DATADIR/primary-bin.000001
  --exec $MYSQL_BINLOG --verbose $MYSQLD_DATADIR/primary-bin.000002
  --connection replica
  show variables like 'server_id';
  show status like 'Ndb_replica_max_replicated_epoch';
  select * from mysql.ndb_apply_status order by server_id;
  select * from mysql.ndb_binlog_index;
  SHOW REPLICA STATUS;
  SHOW BINARY LOGS;
  SHOW BINLOG EVENTS IN 'primary-bin.000001';
  SHOW BINLOG EVENTS IN 'primary-bin.000002';
  let $MYSQLD_DATADIR= `select @@datadir;`;
  --exec $MYSQL_BINLOG --verbose $MYSQLD_DATADIR/primary-bin.000001
  --exec $MYSQL_BINLOG --verbose $MYSQLD_DATADIR/primary-bin.000002
  --connection replica1
  show variables like 'server_id';
  show status like 'Ndb_replica_max_replicated_epoch';
  select * from mysql.ndb_apply_status order by server_id;
  select * from mysql.ndb_binlog_index;
  SHOW REPLICA STATUS;
  SHOW BINARY LOGS;
  SHOW BINLOG EVENTS IN 'primary-bin.000001';
#  SHOW BINLOG EVENTS IN 'primary-bin.000002';
  let $MYSQLD_DATADIR= `select @@datadir;`;
  --exec $MYSQL_BINLOG --verbose $MYSQLD_DATADIR/primary-bin.000001
#  --exec $MYSQL_BINLOG --verbose $MYSQLD_DATADIR/primary-bin.000002
  --connection primary
  --disable_result_log
}

--enable_result_log
--enable_query_log

# END TRANSIENT FAILURE DEBUGGING

--echo Now make a new Cluster A change and see that the Max Replicated Epoch advances
--echo once it has propagated

--connection primary1
--echo Primary1 (3)
insert into test.t1 values (4, "Brooke");

--echo Propagate to Cluster B
--sync_replica_with_primary replica1

--echo Make change on Cluster B to allow waiting for reverse propagation
--connection replica
--echo Replica (2)
insert into test.t1 values (5, "Rupert");

--echo Wait for propagation back to Cluster A
--sync_replica_with_primary primary

--connection primary
--echo Primary (1)
--echo Show that Cluster A now has 2 different server_id entries in ndb_apply_status
--echo Those from the new primary (server_id 3) are highest.
select server_id from mysql.ndb_apply_status order by server_id;
select
    count(1)
  from
    information_schema.global_status,
    mysql.ndb_apply_status
  where
    server_id = 3
    and
    variable_name='Ndb_replica_max_replicated_epoch'
    and
    variable_value = epoch;

let $max_epoch = query_get_value("select max(epoch) as epoch from mysql.ndb_apply_status where server_id in (1,3)","epoch", 1);
--disable_query_log
# We have to constrain the search to primary server ids 1,3 in case the
# Replica happens to have similar epoch values
eval select server_id as local_server_with_max_epoch from mysql.ndb_apply_status where epoch=$max_epoch and server_id in (1,3);
--enable_query_log

--echo Done

--connection primary1
drop table t1;
--sync_replica_with_primary replica1

--source suite/ndb_rpl/ndb_primary-replica_2ch_end.inc

