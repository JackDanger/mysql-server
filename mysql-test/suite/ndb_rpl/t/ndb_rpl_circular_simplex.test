# The include statement below is a temp one for tests that are yet to
#be ported to run with InnoDB,
#but needs to be kept for tests that would need MyISAM in future.
--source include/force_myisam_default.inc

--source include/have_ndb.inc
--source suite/ndb_rpl/ndb_primary-replica.inc

connection primary;
CREATE TABLE t1 (a int key, b int) ENGINE=NDB;
sync_replica_with_primary;
SHOW TABLES;

# Lose the events from the replica binary log: there is no
# need to re-create the table on the primary.
connection replica;
RESET PRIMARY;

# Insert some values on the replica and primary
connection primary;
INSERT INTO t1 VALUES (1,2);
# Switch to replica once event is applied and insert a row
sync_replica_with_primary;
connection replica;
INSERT INTO t1 VALUES (2,3);

# ... it is now very probable that we have a mixed event in the binary
# log.  If we don't, the test should still pass, but will not test the
# mixed event situation.

# The statement is disabled since it cannot reliably show the same
# info all the time.  Use it for debug purposes.

#SHOW BINLOG EVENTS;

# Replicate back to the primary to test this mixed event on the primary
STOP REPLICA;

--let $rpl_topology= 1->2->1
--source include/rpl_change_topology.inc
connection primary;

START REPLICA;

connection replica;
sync_replica_with_primary primary;

# The statement is disabled since it cannot reliably show the same
# info all the time.  Use it for debug purposes.

#SHOW BINLOG EVENTS;

# Wait for replica threads to start before SHOWing status
--source include/wait_for_replica_to_start.inc

# Check that there is no error in replication
source include/check_replica_is_running.inc;

# Check that we have the data on the primary
SELECT * FROM t1 ORDER BY a;

# We should now have another mixed event, likely with "replica" server
# id last, and with the STMT_END_F flag set.

# The statement is disabled since it cannot reliably show the same
# info all the time.  Use it for debug purposes.

#SHOW BINLOG EVENTS;

# now lets see that this data is applied correctly on the replica
STOP REPLICA;
save_primary_pos;

connection replica;
START REPLICA;

# check that we have the data on the replica
sync_with_primary;
SELECT * FROM t1 ORDER BY a;

# Wait for replica threads to start before SHOWing status
--source include/wait_for_replica_to_start.inc

# Check that there is no error in replication
source include/check_replica_is_running.inc;

-- connection primary
DROP TABLE t1;
-- sync_replica_with_primary

--let $rpl_only_running_threads= 1
--source include/rpl_end.inc
