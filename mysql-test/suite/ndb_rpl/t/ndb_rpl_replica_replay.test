--source include/have_ndb.inc
--source include/have_binlog_format_mixed_or_row.inc
--source suite/ndb_rpl/ndb_primary-replica.inc
--source include/have_debug.inc


# Test how the replica behaves when Binlog is replayed intentionally
# and unintentionally
#
--connection primary
use test;
create table test.t1 (a int primary key, content varchar(1000)) engine=ndb;

--sync_replica_with_primary
--connection primary
reset primary;

--connection replica
# Add a suppression for the warning that will appear in the
# Replica's .err file
call mtr.add_suppression("NDB Replica : At SQL thread start applying epoch .*");

STOP REPLICA;
CHANGE PRIMARY TO PRIMARY_LOG_POS=4;
START REPLICA;

--echo Capture current count of epoch decline warnings
--let mysqld_name=mysqld.1.replica
--source ndb_rpl_get_server_error_log.inc
--disable_query_log
--disable_result_log
select @init_lower_warn_count:=count(1) from test.server_error_log where line like '%Ndb Replica%lower than previously applied%Check replica positioning%';
select @init_lower_err_count:=count(1) from test.server_error_log where line like '%Ndb Replica%SQL thread stopped%lower than previously applied%';
select @init_repeat_err_count:=count(1) from test.server_error_log where line like '%Ndb Replica%SQL thread stopped%reapply already committed epoch%';
select @init_skipped_err_count:=count(1) from test.server_error_log where line like '%Ndb Replica%SQL thread stopped%has not been committed%';
--enable_query_log
--enable_result_log

--connection primary 

# Create some distinct epochs by writing data, and 
# synchronising on binlog...
--let $i=6
while($i)
{
  eval insert into test.t1 values ($i, repeat('B', 1000));
  --disable_query_log
  --disable_result_log
  show binlog events;
  --enable_result_log
  --enable_query_log
  --dec $i
}

--echo Expect that we have at least 2 epochs logged.
select count(1) > 1 from 
  (select distinct epoch from mysql.ndb_binlog_index) as logged_epochs;

--sync_replica_with_primary
--connection replica

--echo Any replica positioning warnings?
--echo Should be none
--source ndb_rpl_get_server_error_log.inc
--disable_query_log
select count(1) - @init_lower_warn_count as lower_warn_count from test.server_error_log where line like '%Ndb Replica%lower than previously applied%Check replica positioning%';
select count(1) - @init_lower_err_count as lower_err_count from test.server_error_log where line like '%Ndb Replica%SQL thread stopped%lower than previously applied%';
select count(1) - @init_repeat_err_count as repeat_err_count from test.server_error_log where line like '%Ndb Replica%SQL thread stopped%reapply already committed epoch%';
select count(1) - @init_skipped_err_count as skipped_err_count from test.server_error_log where line like '%Ndb Replica%SQL thread stopped%has not been committed%';
--enable_query_log
--echo Now stop and manually replay old binlog.
stop replica;
change primary to primary_log_pos=4;

start replica;

--connection primary
--sync_replica_with_primary
--connection replica

--echo Any replica positioning warnings?
--echo Should be one
--source ndb_rpl_get_server_error_log.inc
--disable_query_log
select count(1) - @init_lower_warn_count as lower_warn_count from test.server_error_log where line like '%Ndb Replica%lower than previously applied%Check replica positioning%';
select count(1) - @init_lower_err_count as lower_err_count from test.server_error_log where line like '%Ndb Replica%SQL thread stopped%lower than previously applied%';
select count(1) - @init_repeat_err_count as repeat_err_count from test.server_error_log where line like '%Ndb Replica%SQL thread stopped%reapply already committed epoch%';
select count(1) - @init_skipped_err_count as skipped_err_count from test.server_error_log where line like '%Ndb Replica%SQL thread stopped%has not been committed%';
--enable_query_log

--echo Repeat
stop replica;
change primary to primary_log_pos=4;

start replica;

--connection primary
--sync_replica_with_primary
--connection replica

--echo Any replica positioning warnings?
--echo Should be two
--source ndb_rpl_get_server_error_log.inc
--disable_query_log
select count(1) - @init_lower_warn_count as lower_warn_count from test.server_error_log where line like '%Ndb Replica%lower than previously applied%Check replica positioning%';
select count(1) - @init_lower_err_count as lower_err_count from test.server_error_log where line like '%Ndb Replica%SQL thread stopped%lower than previously applied%';
select count(1) - @init_repeat_err_count as repeat_err_count from test.server_error_log where line like '%Ndb Replica%SQL thread stopped%reapply already committed epoch%';
select count(1) - @init_skipped_err_count as skipped_err_count from test.server_error_log where line like '%Ndb Replica%SQL thread stopped%has not been committed%';
--enable_query_log


--echo Now try re-positioning after RESET REPLICA
STOP REPLICA;
RESET REPLICA;

--source include/rpl_start_replicas.inc
--connection primary
--sync_replica_with_primary
--connection replica

--echo Any replica positioning warnings?
--echo Should be two, e.g. no extras after the RESET REPLICA
--echo This avoids warnings when replica context has been explicitly reset

--source ndb_rpl_get_server_error_log.inc
--disable_query_log
select count(1) - @init_lower_warn_count as lower_warn_count from test.server_error_log where line like '%Ndb Replica%lower than previously applied%Check replica positioning%';
select count(1) - @init_lower_err_count as lower_err_count from test.server_error_log where line like '%Ndb Replica%SQL thread stopped%lower than previously applied%';
select count(1) - @init_repeat_err_count as repeat_err_count from test.server_error_log where line like '%Ndb Replica%SQL thread stopped%reapply already committed epoch%';
select count(1) - @init_skipped_err_count as skipped_err_count from test.server_error_log where line like '%Ndb Replica%SQL thread stopped%has not been committed%';
--enable_query_log


# TODO : Test replay exactly on last-applied epoch, as this is probably a
# common case for users who position on last epoch rather than just-after it.

--connection primary
--echo Now get unexpected epoch back-step using fault injection
--echo on the Primary.
call mtr.add_suppression("NDB Binlog injector cycling gcis .*");

set @old_debug = @@global.debug;
set global debug="";
set global debug="+d,ndb_binlog_injector_cycle_gcis";
show variables like 'debug';

--echo Let's make some epochs
--let $i=6
while($i)
{
  eval insert into test.t1 values ($i + 6, repeat('E', 1000));
  --disable_query_log
  --disable_result_log
  show binlog events;
  --enable_result_log
  --enable_query_log
  --dec $i
}

--connection replica

call mtr.add_suppression("NDB Replica : SQL thread stopped as applying epoch .*");
call mtr.add_suppression("Replica SQL for channel '': Could not execute .* HA_ERR_ROWS_EVENT_APPLY; .*");
call mtr.add_suppression("Replica: Got error 173 .*");

--echo Check that replica stopped with an error
--let $replica_sql_errno=1296
--source include/wait_for_replica_sql_error.inc

--echo Let's look at the warnings and errors now...

--source ndb_rpl_get_server_error_log.inc
--disable_query_log
select count(1) - @init_lower_warn_count as lower_warn_count from test.server_error_log where line like '%Ndb Replica%lower than previously applied%Check replica positioning%';
select count(1) - @init_lower_err_count as lower_err_count from test.server_error_log where line like '%Ndb Replica%SQL thread stopped%lower than previously applied%';
select count(1) - @init_repeat_err_count as repeat_err_count from test.server_error_log where line like '%Ndb Replica%SQL thread stopped%reapply already committed epoch%';
select count(1) - @init_skipped_err_count as skipped_err_count from test.server_error_log where line like '%Ndb Replica%SQL thread stopped%has not been committed%';
--enable_query_log


--echo Now check that we can manually restart the replica

--connection primary
set global debug = @old_debug;

reset primary;

--connection replica
stop replica;

change primary to primary_log_pos=4;

start replica;

--connection primary
insert into test.t1 values (13, repeat('A', 1000));

--sync_replica_with_primary
--connection replica

--echo Check replica warnings now, should be no extras
--echo e.g. 2 warnings, 1 error

--source ndb_rpl_get_server_error_log.inc
--disable_query_log
select count(1) - @init_lower_warn_count as lower_warn_count from test.server_error_log where line like '%Ndb Replica%lower than previously applied%Check replica positioning%';
select count(1) - @init_lower_err_count as lower_err_count from test.server_error_log where line like '%Ndb Replica%SQL thread stopped%lower than previously applied%';
select count(1) - @init_repeat_err_count as repeat_err_count from test.server_error_log where line like '%Ndb Replica%SQL thread stopped%reapply already committed epoch%';
select count(1) - @init_skipped_err_count as skipped_err_count from test.server_error_log where line like '%Ndb Replica%SQL thread stopped%has not been committed%';
--enable_query_log

--connection primary

delete from test.t1;
--sync_replica_with_primary


--connection primary
--echo Now get unexpected epoch repeat using fault-injection on the primary
call mtr.add_suppression("NDB Binlog injector repeating gcis .*");

set @old_debug = @@global.debug;
set global debug="";
set global debug="+d,ndb_binlog_injector_repeat_gcis";
show variables like 'debug';

--echo Let's make some epochs
--let $i=6
while($i)
{
  eval insert into test.t1 values ($i, repeat('E', 1000));
  --disable_query_log
  --disable_result_log
  show binlog events;
  --enable_result_log
  --enable_query_log
  --dec $i
}

--connection replica

call mtr.add_suppression("NDB Replica : SQL thread stopped as attempted to reapply already committed epoch .*");
call mtr.add_suppression("Replica SQL for channel '': Could not execute .* HA_ERR_ROWS_EVENT_APPLY; .*");
call mtr.add_suppression("Replica: Got error 173 .*");

--echo Check that replica stopped with an error
--let $replica_sql_errno=1296
--source include/wait_for_replica_sql_error.inc

--echo Let's look at the warnings and errors now...
--echo Should be increase in repeat error count.

--source ndb_rpl_get_server_error_log.inc
--disable_query_log
select count(1) - @init_lower_warn_count as lower_warn_count from test.server_error_log where line like '%Ndb Replica%lower than previously applied%Check replica positioning%';
select count(1) - @init_lower_err_count as lower_err_count from test.server_error_log where line like '%Ndb Replica%SQL thread stopped%lower than previously applied%';
select count(1) - @init_repeat_err_count as repeat_err_count from test.server_error_log where line like '%Ndb Replica%SQL thread stopped%reapply already committed epoch%';
select count(1) - @init_skipped_err_count as skipped_err_count from test.server_error_log where line like '%Ndb Replica%SQL thread stopped%has not been committed%';
--enable_query_log

--echo Now check that we can manually restart the replica

--connection primary
set global debug = @old_debug;

reset primary;

--connection replica
stop replica;

change primary to primary_log_pos=4;

start replica;

--connection primary
insert into test.t1 values (13, repeat('A', 1000));

--sync_replica_with_primary
--connection replica

--echo Check replica warnings now, should be no extras

--source ndb_rpl_get_server_error_log.inc
--disable_query_log
select count(1) - @init_lower_warn_count as lower_warn_count from test.server_error_log where line like '%Ndb Replica%lower than previously applied%Check replica positioning%';
select count(1) - @init_lower_err_count as lower_err_count from test.server_error_log where line like '%Ndb Replica%SQL thread stopped%lower than previously applied%';
select count(1) - @init_repeat_err_count as repeat_err_count from test.server_error_log where line like '%Ndb Replica%SQL thread stopped%reapply already committed epoch%';
select count(1) - @init_skipped_err_count as skipped_err_count from test.server_error_log where line like '%Ndb Replica%SQL thread stopped%has not been committed%';
--enable_query_log

--connection primary

delete from test.t1;
--sync_replica_with_primary


--connection replica
--echo Now get skipped epoch using fault injection on the replica

set @old_debug = @@global.debug;
set global debug="";
set global debug="+d,ndb_replica_fail_marking_epoch_committed";
show variables like 'debug';

--connection primary

--echo Let's make some epochs
--let $i=6
while($i)
{
  eval insert into test.t1 values ($i, repeat('E', 1000));
  --disable_query_log
  --disable_result_log
  show binlog events;
  --enable_result_log
  --enable_query_log
  --dec $i
}

--connection replica

call mtr.add_suppression("NDB Replica : SQL thread stopped as attempting to apply new epoch .*");
call mtr.add_suppression("Replica SQL for channel '': Could not execute .* HA_ERR_ROWS_EVENT_APPLY; .*");
call mtr.add_suppression("Replica: Got error 173 .*");

--echo Check that replica stopped with an error
--let $replica_sql_errno=1296
--source include/wait_for_replica_sql_error.inc

--echo Let's look at the warnings and errors now...
--echo Should be increase in repeat error count.

--source ndb_rpl_get_server_error_log.inc
--disable_query_log
select count(1) - @init_lower_warn_count as lower_warn_count from test.server_error_log where line like '%Ndb Replica%lower than previously applied%Check replica positioning%';
select count(1) - @init_lower_err_count as lower_err_count from test.server_error_log where line like '%Ndb Replica%SQL thread stopped%lower than previously applied%';
select count(1) - @init_repeat_err_count as repeat_err_count from test.server_error_log where line like '%Ndb Replica%SQL thread stopped%reapply already committed epoch%';
select count(1) - @init_skipped_err_count as skipped_err_count from test.server_error_log where line like '%Ndb Replica%SQL thread stopped%has not been committed%';
--enable_query_log


--echo Now check that we can manually restart the replica

--connection replica
set global debug = @old_debug;

--connection primary

reset primary;

--connection replica
stop replica;

change primary to primary_log_pos=4;

start replica;

--connection primary
insert into test.t1 values (13, repeat('A', 1000));

--sync_replica_with_primary
--connection replica

--echo Check replica warnings now, should be no extras

--source ndb_rpl_get_server_error_log.inc
--disable_query_log
select count(1) - @init_lower_warn_count as lower_warn_count from test.server_error_log where line like '%Ndb Replica%lower than previously applied%Check replica positioning%';
select count(1) - @init_lower_err_count as lower_err_count from test.server_error_log where line like '%Ndb Replica%SQL thread stopped%lower than previously applied%';
select count(1) - @init_repeat_err_count as repeat_err_count from test.server_error_log where line like '%Ndb Replica%SQL thread stopped%reapply already committed epoch%';
select count(1) - @init_skipped_err_count as skipped_err_count from test.server_error_log where line like '%Ndb Replica%SQL thread stopped%has not been committed%';
--enable_query_log


drop table test.server_error_log;

--connection primary
drop table test.t1;
--sync_replica_with_primary

--source include/rpl_end.inc
