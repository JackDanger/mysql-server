#
# Check statement instrumentation of replicated statements
#
--source include/not_embedded.inc
--source include/have_perfschema.inc
--source include/no_protocol.inc
--source include/have_binlog_format_mixed.inc
--source include/primary-replica.inc

#==============================================================
# Execute a variety of dml and ddl statements on the primary.
# Verify that the corresponding statement events are generated
# on the replica.
#
# 1. Setup test files on primary
# 2. Replicate test files to replica
# 3. Perform dml and ddl statements on primary
# 4. Copy statement events on primary into a temporary table
# 4. Replicate to replica
# 5. Compare statement events on replica to those from the primary
# 6. Disable statement/abstract/relay_log on replica
# 7. Update some tables on the primary then replicate
# 8. Verify that the updates were replicated but no statement
#    events were recorded
#==============================================================

#
# UTILITY QUERIES
#
let $get_thread_id=
  select thread_id into @my_thread_id
  from performance_schema.threads
  where processlist_id = connection_id();

let $disable_instruments=
  update performance_schema.setup_instruments
  set enabled='no', timed='no'
  where name like '%statement/%';

let $enable_instruments= ../include
  update performance_schema.setup_instruments
  set enabled='yes', timed='yes'
  where name like '%statement/%';

let $column_list=
  thread_id, event_id, rpad(event_name, 28, ' ') event_name, rpad(current_schema, 10, ' ') current_schema, rpad(digest_text, 72, ' ') digest_text, sql_text;

# Define instrument name for enable/disable instruments
let $pfs_instrument='%statement/%';

--echo
--echo #
--echo # STEP 1 - CREATE AND REPLICATE TEST TABLES
--echo #

connection primary;

--echo
--echo **************
--echo *** PRIMARY ***
--echo **************
--echo
--echo *** Create test tables
--echo

show global variables like '%binlog_format%';

--disable_warnings
drop table if exists test.marker;
--enable_warnings

eval $get_thread_id;

create table test.marker(s1 int) engine=innodb;

sync_replica_with_primary;

--echo **************
--echo *** REPLICA  ***
--echo **************
--echo
--echo *** Clear statement events
--source ../include/rpl_statements_truncate.inc

--echo
--echo #
--echo # STEP 2 - REPLICATE ONE ROW ON PRIMARY TO GET REPLICATION THREAD ID ON REPLICA
--echo #

connection primary;

--echo **************
--echo *** PRIMARY ***
--echo **************
--echo
insert into test.marker values (0);
--echo

sync_replica_with_primary;

--echo **************
--echo *** REPLICA  ***
--echo **************
--echo
--echo *** Verify row, get replication thread id, clear statement events
--echo

# TODO: Get replica thread id from threads using thread/sql/replica_sql event name

select thread_id into @replica_thread_id from performance_schema.events_statements_history
  where sql_text like '%marker%';
let $replica_thread_id= `select @replica_thread_id`;

--echo *** Verify row inserted on primary was replicated
select count(*) = 1 as 'Expect 1' from test.marker;

--echo *** Clear statement events
--source ../include/rpl_statements_truncate.inc

--echo
--echo #
--echo # STEP 3 - PERFORM DML STATEMENTS ON PRIMARY
--echo #

connection primary;

--echo **************
--echo *** PRIMARY ***
--echo **************
--echo
show global variables like '%binlog_format%';

--echo *** Clear statement events
--source ../include/rpl_statements_truncate.inc

--echo
--echo *** Create/drop table, create/drop database
--echo
create database marker1_db;
create database marker2_db;
create table marker1_db.table1 (s1 int) engine=innodb;
create table marker2_db.table1 (s1 int) engine=innodb;
create table marker2_db.table2 (s1 int) engine=innodb;

--echo
--echo *** Transaction
start transaction;
insert into marker1_db.table1 values (1), (2), (3);
insert into marker2_db.table1 values (1), (2), (3);
commit;

--echo
--echo *** Alter
alter table marker1_db.table1 add column (s2 varchar(32));

--echo
--echo *** Insert, Update
start transaction;
insert into marker1_db.table1 values (4, 'four'), (5, 'five'), (6, 'six');
update marker1_db.table1 set s1 = s1 + 1;
commit;

--echo
--echo *** Rollback
start transaction;
insert into marker1_db.table1 values (7, 'seven'), (8, 'eight'), (9, 'nine');
rollback;

--echo
--echo *** Autocommit, Delete, Drop
delete from marker1_db.table1 where s1 > 4;
drop table marker2_db.table1;
drop database marker2_db;

--source ../include/disable_instruments.inc

--echo
--echo *** Examine statements events that will be compared on the replica
--echo

--replace_column 1 [THREAD_ID] 2 [EVENT_ID]

eval select $column_list from performance_schema.events_statements_history_long
  where sql_text like '%marker%' order by event_id;

--echo
--echo #
--echo # STEP 4 - REPLICATE STATEMENT EVENTS ON PRIMARY TO REPLICA
--echo #
--echo
--echo *** Store statement events in holding table, then replicate
--echo

--source ../include/disable_instruments.inc

--echo #
--echo # Create table to hold statement events for later comparison on the replica
--echo #

create table test.primary_events_statements_history_long as
  (select thread_id, event_id, event_name, sql_text, digest, digest_text, current_schema, rows_affected
     from performance_schema.events_statements_history_long
     where (thread_id=@my_thread_id and digest_text like '%marker%'));

--source ../include/enable_instruments.inc

--echo
--echo #
--echo # STEP 5 - VERIFY DML AND DDL STATEMENT EVENTS ON REPLICA
--echo #

sync_replica_with_primary;

--echo **************
--echo *** REPLICA  ***
--echo **************

--source ../include/disable_instruments.inc

--echo
--echo *** List statement events from primary
--echo
--replace_column 1 [THREAD_ID] 2 [EVENT_ID]
eval select $column_list from primary_events_statements_history_long order by event_id;

--echo
--echo *** List statement events on replica
--echo

--replace_column 1 [THREAD_ID] 2 [EVENT_ID]

eval select $column_list from performance_schema.events_statements_history_long
  where thread_id = @replica_thread_id and sql_text like '%marker%' order by event_id;

--echo
--echo *** Compare primary and replica events
--echo

# Note: The statement digest provides a more robust comparison than the
# event name. However, in some cases, e.g. DROP TABLE, the server generates
# its own version of the statement which includes additional quotes and a
# comment. A digest comparison is therefore impractical for server-generated
# statements, so we use both methods to ensure coverage.

--echo 
--echo *** Event name comparison - expect 0 mismatches
--echo 

select thread_id, event_id, event_name, digest_text, sql_text from performance_schema.events_statements_history_long t1
  where t1.thread_id = @replica_thread_id and
    sql_text like '%marker%' and
    not exists (select * from primary_events_statements_history_long t2 where t2.event_name = t1.event_name);

--echo 
--echo *** Statement digest comparison - expect 1 mismatch for DROP TABLE
--echo 

--replace_column 1 [THREAD_ID] 2 [EVENT_ID] 4 [DIGEST]

select thread_id, event_id, event_name, digest, digest_text, sql_text from performance_schema.events_statements_history_long t1
  where t1.thread_id = @replica_thread_id and
    sql_text like '%marker%' and
    not exists (select * from primary_events_statements_history_long t2 where t2.digest = t1.digest);

--echo
--echo #
--echo # STEP 6 - DISABLE REPLICATED STATEMENT EVENTS ON REPLICA
--echo #
--source ../include/rpl_statements_truncate.inc
--source ../include/enable_instruments.inc

update performance_schema.setup_instruments set enabled='no', timed='no'
  where name like '%statement/abstract/relay_log%';

select * from performance_schema.setup_instruments where name like '%statement/abstract/relay_log%';

--echo
--echo #
--echo # STEP 7 - UPDATE TABLES ON PRIMARY, REPLICATE
--echo #

connection primary;

--echo **************
--echo *** PRIMARY ***
--echo **************
--echo
--echo *** Clear statement events
--source ../include/rpl_statements_truncate.inc

--echo *** Update some tables, then replicate
--echo

insert into marker1_db.table1 values (999, '999'), (998, '998'), (997, '997');

--echo
--echo #
--echo # STEP 8 - VERIFY TABLE UPDATES FROM PRIMARY, EXPECT NO STATEMENT EVENTS ON REPLICA
--echo #

sync_replica_with_primary;

--echo **************
--echo *** REPLICA  ***
--echo **************
--echo
--echo *** Confirm rows were replicated
--echo

select * from marker1_db.table1 where s1 > 900 order by s1;

--echo
--echo *** Confirm that are no statements events from the replication thread
--echo

select * from performance_schema.events_statements_history_long
  where thread_id = @replica_thread_id;

--source ../include/enable_instruments.inc

--echo
--echo #
--echo # STEP 9 - CLEAN UP
--echo #
--echo
--disable_query_log
--disable_warnings

connection primary;
drop table test.marker;
drop table test.primary_events_statements_history_long;
drop database marker1_db;

sync_replica_with_primary;

--enable_warnings
--enable_query_log
--source include/rpl_end.inc
