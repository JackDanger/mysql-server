include/primary-replica.inc
Warnings:
Note	####	Sending passwords in plain text without SSL/TLS is extremely insecure.
Note	####	Storing MySQL user name or password information in the primary.info repository is not secure and is therefore not recommended. Please see the MySQL Manual for more about this issue and possible alternatives.
[connection primary]
call mtr.add_suppression("Unsafe statement written to the binary log using statement format");
call mtr.add_suppression("Unsafe statement written to the binary log using statement format");
[on primary]
CREATE TABLE t1 (a VARCHAR(100), b INT);
INSERT INTO t1 VALUES ("zero", 0);
==== Normal setup ====
[on replica]
include/stop_replica.inc
# CHANGE PRIMARY TO PRIMARY_DELAY = 2*T
include/start_replica.inc
include/assert.inc [SHOW REPLICA STATUS should return the same delay that we set with CHANGE PRIMARY]
[on primary]
INSERT INTO t1 VALUES ('normal setup', 1);
[on replica]
include/sync_replica_io_with_primary.inc
# sleep 1*T
include/assert.inc [Query 1 should not be executed]
include/assert.inc [Status should be 'Waiting until PRIMARY_DELAY...']
# sleep 1*T
# sync with primary (with timeout 1*T)
include/sync_replica_sql.inc
include/assert.inc [Query 1 should be executed]
include/assert.inc [Status should be 'Has read all relay log...']
include/check_replica_is_running.inc
==== Replica lags "naturally" after primary ====
[on primary]
# CREATE FUNCTION delay_on_replica(time_units INT) RETURNS INT BEGIN IF @@server_id = 2 THEN RETURN SLEEP(time_units * T); ELSE RETURN 0; END IF; END
INSERT INTO t1 SELECT delay_on_replica(3), 2;
Warnings:
Note	1592	Unsafe statement written to the binary log using statement format since BINLOG_FORMAT = STATEMENT. Statement is unsafe because it uses a system variable that may have a different value on the replica.
Note	1592	Unsafe statement written to the binary log using statement format since BINLOG_FORMAT = STATEMENT. Statement is unsafe because it uses a system function that may return a different value on the replica.
INSERT INTO t1 VALUES ('replica is already lagging: this statement should execute immediately', 3);
INSERT INTO t1 SELECT delay_on_replica(2), 4;
Warnings:
Note	1592	Unsafe statement written to the binary log using statement format since BINLOG_FORMAT = STATEMENT. Statement is unsafe because it uses a system variable that may have a different value on the replica.
Note	1592	Unsafe statement written to the binary log using statement format since BINLOG_FORMAT = STATEMENT. Statement is unsafe because it uses a system function that may return a different value on the replica.
[on replica]
include/sync_replica_io_with_primary.inc
# sleep 1*T
include/assert.inc [No query executed]
include/assert.inc [Status should be 'Waiting until PRIMARY_DELAY...']
# wait for first query to execute
# sleep 1*T
include/assert.inc [Second query executed]
include/assert.inc [Status should be executing third query (i.e., 'User sleep')]
# sleep 2*T
include/assert.inc [Third query executed]
include/assert.inc [Status should be 'Has read all relay log...']
==== Seconds_Behind_Primary ====
# Bring replica to sync.
include/stop_replica.inc
CHANGE PRIMARY TO PRIMARY_DELAY = 0;
include/start_replica.inc
INSERT INTO t1 VALUES ('Syncing replica', 5);
include/stop_replica.inc
# CHANGE PRIMARY TO PRIMARY_DELAY = 2*T
include/start_replica.inc
INSERT INTO t1 VALUES (delay_on_replica(1), 6);
Warnings:
Note	1592	Unsafe statement written to the binary log using statement format since BINLOG_FORMAT = STATEMENT. Statement is unsafe because it uses a system variable that may have a different value on the replica.
Note	1592	Unsafe statement written to the binary log using statement format since BINLOG_FORMAT = STATEMENT. Statement is unsafe because it uses a system function that may return a different value on the replica.
# sleep 1*T
include/assert.inc [Seconds_Behind_Primary should be between 0 and the 2*T]
# sleep 1*T
include/assert.inc [Seconds_Behind_Primary should be at least 2*T]
==== STOP REPLICA / START REPLICA + DML ====
include/stop_replica.inc
# CHANGE PRIMARY TO PRIMARY_DELAY = 3*T
include/start_replica.inc
[on primary]
INSERT INTO t1 VALUES ('stop replica and start replica: DML', 7);
[on replica]
# sleep 1*T
include/stop_replica.inc
include/assert.inc [STOP REPLICA should finish quickly, not wait for the ongoing sleep to finish]
include/assert.inc [SQL thread position should not increase after STOP REPLICA]
include/assert.inc [Query should not be executed after STOP REPLICA]
include/assert.inc [Status should be '' after STOP REPLICA]
include/start_replica.inc
include/assert.inc [START REPLICA should finish quickly]
[on replica]
include/sync_replica_io_with_primary.inc
# sleep 1*T
include/assert.inc [Query 7 should not be executed]
include/assert.inc [Status should be 'Waiting until PRIMARY_DELAY...']
# sleep 1*T
# sync with primary (with timeout 1*T)
include/sync_replica_sql.inc
include/assert.inc [Query 7 should be executed]
include/assert.inc [Status should be 'Has read all relay log...']
include/check_replica_is_running.inc
==== STOP REPLICA / START REPLICA + DDL ====
This verifies BUG#56442
[on primary]
CREATE TABLE t_check_dml_not_executed_prematurely (a INT);
include/save_primary_pos.inc
[on replica]
# sleep 1*T
include/stop_replica.inc
include/assert.inc [STOP REPLICA should finish quickly, not wait for the ongoing sleep to finish]
include/assert.inc [SQL thread position should not increase after STOP REPLICA]
include/assert.inc [Query should not be executed after STOP REPLICA]
include/assert.inc [Status should be '' after STOP REPLICA]
include/start_replica.inc
include/assert.inc [START REPLICA should finish quickly]
# sleep 1*T
include/assert.inc [DDL Query should not be executed after START REPLICA]
include/assert.inc [Status should be 'Waiting until PRIMARY_DELAY...']
# sleep 1*T
# sync with primary (with timeout 1*T)
include/sync_replica_sql.inc
include/assert.inc [DDL Query should be executed]
include/assert.inc [Status should be 'Has read all relay log...']
include/check_replica_is_running.inc
==== Change back to no delay ====
[on replica]
include/stop_replica.inc
CHANGE PRIMARY TO PRIMARY_DELAY = 0;
include/assert.inc [Delay should be 0 when we set it to 0]
include/start_replica.inc
[on primary]
INSERT INTO t1 VALUES ('change back to no delay', 8);
[on replica]
include/sync_replica_io_with_primary.inc
# sleep 1*T
include/assert.inc [Query should be executed]
include/assert.inc [Status should be 'Replica has read all relay log...']
==== Reset delay with RESET REPLICA ====
include/stop_replica.inc
CHANGE PRIMARY TO PRIMARY_DELAY = 71;
include/start_replica.inc
include/assert.inc [Delay should be 71 when we set it to 71]
include/stop_replica.inc
RESET REPLICA;
[on primary]
RESET PRIMARY;
[on replica]
include/start_replica.inc
include/assert.inc [Delay should be 0 after RESET REPLICA]
==== Set an invalid value for the delay ====
include/stop_replica.inc
# Expect error for setting negative delay
CHANGE PRIMARY TO PRIMARY_DELAY = -1;
ERROR 42000: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near '-1' at line 1
# Expect that it's ok to set delay of 2^31-1
CHANGE PRIMARY TO PRIMARY_DELAY = 2147483647;
# Expect error for setting delay between 2^31 and 2^32-1
CHANGE PRIMARY TO PRIMARY_DELAY = 2147483648;
ERROR HY000: The requested value 2147483648 for the primary delay exceeds the maximum 2147483647
# Expect error for setting delay to nonsense
CHANGE PRIMARY TO PRIMARY_DELAY = blah;
ERROR 42000: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'blah' at line 1
CHANGE PRIMARY TO PRIMARY_DELAY = 0;
include/start_replica.inc
==== Clean up ====
[on primary]
DROP TABLE t1, t_check_dml_not_executed_prematurely;
DROP FUNCTION delay_on_replica;
[on replica]
include/rpl_end.inc
