# Bug#47699 rpl.rpl_backup_block fails sporadically
#
# START REPLICA released the lock and returned before it cleared the error,
# so there is a possibility that Replica_SQL_Error is not 0.
include/primary-replica.inc
Warnings:
Note	####	Sending passwords in plain text without SSL/TLS is extremely insecure.
Note	####	Storing MySQL user name or password information in the primary info repository is not secure and is therefore not recommended. Please consider using the USER and PASSWORD connection options for START REPLICA; see the 'START REPLICA Syntax' in the MySQL Manual for more information.
[connection primary]
[on replica]
CALL mtr.add_suppression("Replica: Table 't1' already exists Error_code: 1050");
CALL mtr.add_suppression("Replica SQL for channel '': .*Error .Table .t1. already exists. on query.* Error_code: 1050");
call mtr.add_suppression("The replica coordinator and worker threads are stopped, possibly leaving data in inconsistent state");
# The statement makes SQL thread to fail.
CREATE TABLE t1(c1 INT);
[on primary]
CREATE TABLE t1(c1 INT);
[on replica]
include/wait_for_replica_sql_error.inc [errno=1050]
DROP TABLE t1;
# Block SQL thread immediately after it starts.
SET DEBUG_SYNC='after_start_replica WAIT_FOR signal.continue';
START REPLICA SQL_THREAD;
include/wait_for_replica_sql_to_start.inc
# Check Replica_SQL_Error, there should not be an error.
include/check_replica_no_error.inc
# Resume SQL thread
SET DEBUG_SYNC="now SIGNAL signal.continue";
[on primary]
DROP TABLE t1;
include/rpl_end.inc
