# This test is to verify that DROP TEMPORARY TABLE
# is automatically binlogged and sent to replica
# when a temp table is dropped by disconnection
# of a primary's conection.
# So it does not apply to row-based, where we neither need
# nor do this automatic binlogging. And if we run this test
# in row-based, it hangs waiting for an offset which is never
# reached (the "sync_with_primary 1"), logically.

--source include/have_binlog_format_mixed_or_statement.inc
source include/primary-replica.inc;

--disable_query_log
CALL mtr.add_suppression("Unsafe statement written to the binary log using statement format since BINLOG_FORMAT = STATEMENT");
--enable_query_log

create table t2(n int);
create temporary table t1 (n int);
insert into t1 values(1),(2),(3);
--disable_warnings
insert into t2 select * from t1;
--enable_warnings
connection primary1;
create temporary table t1 (n int);
insert into t1 values (4),(5);
--disable_warnings
insert into t2 select * from t1 as t10;
--enable_warnings
save_primary_pos;
disconnect primary;
connection replica;
#add 1 to catch drop table
sync_with_primary 1;
connection primary1;
insert into t2 values(6);
save_primary_pos;
disconnect primary1;
connection replica;
# same trick to go one more event
sync_with_primary 1;
select * from t2;
show status like 'Replica_open_temp_tables';
#
# Clean up
#
connect (primary2,localhost,root,,);
connection primary2;

# We will get a warning for t1 as this is a temporary table that doesn't
# exist in this connection.

drop table if exists t1,t2;

--source include/rpl_end.inc
# End of 4.1 tests
