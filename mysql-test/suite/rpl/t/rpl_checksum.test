# WL2540 replication events checksum
# Testing configuration parameters

--source include/not_group_replication_plugin.inc
--source include/not_gtid_enabled.inc
--source include/have_debug.inc
--source include/have_binlog_format_mixed.inc
--source include/primary-replica.inc

call mtr.add_suppression('Replica can not handle replication events with the checksum that primary is configured to log');
call mtr.add_suppression('Replication event checksum verification failed');
# due to C failure simulation
call mtr.add_suppression('Relay log write failure: could not queue event from primary');
call mtr.add_suppression('Event crc check failed! Most likely there is event corruption');
call mtr.add_suppression("Replica SQL for channel '': Error initializing relay log position: I/O error reading event at position .*, Error_code: 1593");
call mtr.add_suppression('Primary is configured to log replication events with checksum, but will not send such events to replicas that cannot process');

# A. read/write access to the global vars:
# binlog_checksum primary_verify_checksum replica_sql_verify_checksum

connection primary;

set @primary_save_binlog_checksum= @@global.binlog_checksum;
set @save_primary_verify_checksum =  @@global.primary_verify_checksum;

select @@global.binlog_checksum as 'must be CRC32 because of the command line option';
--error ER_INCORRECT_GLOBAL_LOCAL_VAR
select @@session.binlog_checksum as 'no session var';

select @@global.primary_verify_checksum  as 'must be zero because of default';
--error ER_INCORRECT_GLOBAL_LOCAL_VAR
select @@session.primary_verify_checksum  as 'no session var';

connection replica;

set @replica_save_binlog_checksum= @@global.binlog_checksum;
set @save_replica_sql_verify_checksum = @@global.replica_sql_verify_checksum;

select @@global.replica_sql_verify_checksum  as 'must be one because of default';
--error ER_INCORRECT_GLOBAL_LOCAL_VAR
select @@session.replica_sql_verify_checksum  as 'no session var';

connection primary;

source include/show_binary_logs.inc;
set @@global.binlog_checksum = NONE;
--echo  *** must be rotations seen ***
source include/show_binary_logs.inc;

set @@global.binlog_checksum = default;

# testing lack of side-effects in non-effective update of binlog_checksum:
set @@global.binlog_checksum = CRC32;
set @@global.binlog_checksum = CRC32; 

set @@global.primary_verify_checksum = 0;
set @@global.primary_verify_checksum = default;

--error ER_WRONG_VALUE_FOR_VAR
set @@global.binlog_checksum = ADLER32;
--error ER_WRONG_VALUE_FOR_VAR
set @@global.primary_verify_checksum = 2; # the var is of bool type

connection replica;

set @@global.replica_sql_verify_checksum = 0;
set @@global.replica_sql_verify_checksum = default;
--error ER_WRONG_VALUE_FOR_VAR
set @@global.replica_sql_verify_checksum = 2; # the var is of bool type

#
# B. Old Replica to New primary conditions
#
# while primary does not send a checksum-ed binlog the Old Replica can
# work with the New Primary

connection primary;

set @@global.binlog_checksum = NONE;
create table t1 (a int);

# testing that binlog rotation preserves opt_binlog_checksum value
flush logs;
flush logs;
flush logs;

sync_replica_with_primary;
#connection replica;
# checking that rotation on the replica side leaves replica stable
flush logs;
flush logs;
flush logs;
select count(*) as zero from t1;

source include/stop_replica.inc;

connection primary;
set @@global.binlog_checksum = CRC32;
insert into t1 values (1) /* will not be applied on replica due to simulation */;

# instruction to the dump thread

connection replica;
set @@global.debug='d,simulate_replica_unaware_checksum';
start replica;
let $replica_io_errno= 1236; # ER_PRIMARY_FATAL_ERROR_READING_BINLOG
--let $show_replica_io_error= 1
# Mask line numbers
--let $replica_io_error_replace= / at [0-9]*/ at XXX/
source include/wait_for_replica_io_error.inc;

select count(*) as zero from t1;

###connection primary;

# *always* make sure the replica threads are stopped 
# or in waiting state before updating the global debug
# variable (see BUG#11765758 for details).
--source include/stop_replica.inc
set @@global.debug='';

connection replica;
source include/start_replica.inc;

# 
# C. checksum failure simulations
#

# C1. Failure by a client thread
connection primary;
set @@global.primary_verify_checksum = 1;
set @@session.debug='d,simulate_checksum_test_failure';
--error ER_ERROR_WHEN_EXECUTING_COMMAND
show binlog events;
set @@session.debug='';
set @@global.primary_verify_checksum = default;

#connection primary;
sync_replica_with_primary;

connection replica;
source include/stop_replica.inc;

connection primary;
create table t2 (a int);
let $pos_primary= query_get_value(SHOW PRIMARY STATUS, Position, 1);

connection replica;

# C2. Failure by IO thread
# instruction to io thread
set @@global.debug='d,simulate_checksum_test_failure';
start replica io_thread;
# ER_REPLICA_RELAY_LOG_WRITE_FAILURE, ER_NETWORK_READ_EVENT_CHECKSUM_FAILURE
let $replica_io_errno= 1595, 1743;
--let $show_replica_io_error= 0
source include/wait_for_replica_io_error.inc;
# no need to stop the IO thread, it is already stopped
set @@global.debug='';

# to make IO thread re-read it again w/o the failure
start replica io_thread;
--connection primary
--source include/sync_replica_io_with_primary.inc

# C3. Failure by SQL thread
# instruction to sql thread;
set @@global.replica_sql_verify_checksum = 1;
set @@global.debug='d,simulate_checksum_test_failure';
start replica sql_thread;
let $replica_sql_errno= 1593; # ER_REPLICA_FATAL_ERROR
--let $show_replica_sql_error= 1
source include/wait_for_replica_sql_error.inc;
--source include/stop_replica.inc
# resuming SQL thread to parse out the event w/o the failure
set @@global.debug=''; 
source include/start_replica.inc;

connection primary;
sync_replica_with_primary;

#connection replica;
select count(*) as 'must be zero' from t2;

#
# D. Reset replica, Change-Primary, Binlog & Relay-log rotations with 
#    random value on binlog_checksum on both primary and replica
#
connection replica;
stop replica;
reset replica;
reset primary;

# randomize replica server's own checksum policy
set @@global.binlog_checksum= IF(floor((rand()*1000)%2), "CRC32", "NONE");
flush logs;

connection primary;
set @@global.binlog_checksum= CRC32;
reset primary;
flush logs;
create table t3 (a int, b char(5));

connection replica;
source include/start_replica.inc;

connection primary;
sync_replica_with_primary;

#connection replica;
select count(*) as 'must be zero' from t3;
source include/stop_replica.inc;
--replace_result $PRIMARY_MYPORT PRIMARY_PORT
--replace_column 2 ####
eval change primary to primary_host='127.0.0.1',primary_port=$PRIMARY_MYPORT, primary_user='root';

connection primary;
flush logs;
reset primary;
insert into t3 value (1, @@global.binlog_checksum);

connection replica;
source include/start_replica.inc;
flush logs;

connection primary;
sync_replica_with_primary;

#connection replica;
select count(*) as 'must be one' from t3;

connection primary;
set @@global.binlog_checksum= IF(floor((rand()*1000)%2), "CRC32", "NONE");
insert into t3 value (1, @@global.binlog_checksum);
sync_replica_with_primary;

#connection replica;

#clean-up

connection primary;
drop table t1, t2, t3;
set @@global.binlog_checksum = @primary_save_binlog_checksum;
set @@global.primary_verify_checksum = @save_primary_verify_checksum;

#
# BUG#58564: flush_read_lock fails in mysql-trunk-bugfixing after merging with WL#2540
#
# Sanity check that verifies that no assertions are triggered because
# of old FD events (generated by versions prior to server released with 
# checksums feature)
#
# There is no need for query log, if something wrong this should trigger
# an assertion

--disable_query_log

BINLOG '
MfmqTA8BAAAAZwAAAGsAAAABAAQANS41LjctbTMtZGVidWctbG9nAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAx+apMEzgNAAgAEgAEBAQEEgAAVAAEGggAAAAICAgCAA==
';

--enable_query_log

#connection replica;
sync_replica_with_primary;
set @@global.binlog_checksum = @replica_save_binlog_checksum;
set @@global.replica_sql_verify_checksum = @save_replica_sql_verify_checksum;

--source include/rpl_end.inc
