###############################################################################
# Bug#18364070  BACKPORT BUG#18236612 TO MYSQL-5.6
# Problem & Analysis : When Replica SQL thread detects that Primary was restarted
#  with the help of information sent by Primary through 'FormatDescription'
#  event, replica SQL drops all the opened temporary tables in order to have
#  proper cleanup. While replica SQL thread is dropping the temporary tables, it
#  is not decrementing Replica_open_temp_tables count.
#  Fix: Decrement Replica_open_temp_tables count in this case.
# Steps to test:
#  1) Create a temporary table
#  2) Sync it with replica
#  3) Stop replica io thread
#  4) Kill Primary which generates Format Description event
#  5) Restart Primary again
#  6) Start replica io thread
#  7) Wait till SQL thread applies all events
#     (which includes newly generated Format Description event)
#  8) Now verify that Replica_open_temp_tables has '0' value

# This same test steps with gtid enabled mode, works to test the following
# bug as well.
# Bug#18069107 REPLICA CRASHES WITH GTIDS,TEMP TABLE, STOP IO_THREAD, START REPLICA
# Problem & Analysis : When Replica SQL thread detects that Primary was restarted
#  with the help of information sent by Primary through 'FormatDescription'
#  event, replica SQL drops all the opened temporary tables in order to have
#  proper cleanup. When Gtid mode is on and while replica SQL thread is
#  generating DROP TEMPORARY statement for all these temporary tables,
#  server is hitting an assert DEBUG_ASSERT(gtid.spec_type != UNDEF_GROUP)
###############################################################################

# Statement mode is enough (row based temporary
# tables are not replicated)
--source include/have_binlog_format_statement.inc
--source include/primary-replica.inc

# 1. Create a temporary table
CREATE TEMPORARY TABLE temp (i INT);

# 2. Sync it with replica
--sync_replica_with_primary

# 3. Stop replica io thread
--source include/stop_replica_io.inc

# 4. Kill Primary so that it does not go through THD::cleanup logic. Hence it does
# not generate "drop temporary" query for 'temp' table.
--let $rpl_server_number= 1
--let $rpl_force_stop=1
--source include/rpl_stop_server.inc

# 5. Restart Primary (generates Format Description event which tells replica to
# drop all temporary tables)
--source include/rpl_start_server.inc

# 6. Start replica io_thread
--connection replica
--source include/start_replica_io.inc
--connection primary
--source include/sync_replica_io_with_primary.inc

# 7. Wait for replica thread to apply all events (including the newly generated
# FormatDescription event which tells replica SQL thread to drop all temporary
--let $show_statement= SHOW PROCESSLIST
--let $field= State
--let $condition= = 'Replica has read all relay log; waiting for more updates';
--source include/wait_show_condition.inc

# 8.Now if we verify replica_open_temp_tables, it should be '0'
--let $var_value= query_get_value(SHOW STATUS LIKE 'Replica_open_temp_tables', Value, 1)
--let $assert_text= Replica_open_temp_tables should be 0
--let $assert_cond= $var_value = 0
--source include/assert.inc

--source include/rpl_end.inc
