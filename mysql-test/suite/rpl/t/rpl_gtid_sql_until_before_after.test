# BUG#13810456: GTID: UNTIL_SQL_BEFORE_GTID DOES NOT WORK
#
# This test performs multiple invocations of
# START REPLICA UNTIL SQL_BEFORE_GTIDS and START REPLICA UNTIL SQL_AFTER_GTIDS
# to demonstrate its correct operation.
#
# Create a set of transactions on the primary and applied them individually
# by using START REPLICA UNTIL SQL_BEFORE_GTIDS and
# START REPLICA UNTIL SQL_AFTER_GTIDS with different sets of missing and/or
# already applied GTIDs.
#
--source include/not_group_replication_plugin.inc
--source include/primary-replica.inc
--source include/have_gtid.inc

--connection primary
--let $primary_uuid= query_get_value(SELECT @@SERVER_UUID, @@SERVER_UUID, 1)
CREATE TABLE t1(c1 INTEGER) ENGINE= Innodb;
--source include/sync_replica_sql_with_primary.inc
--echo [connection replica]
--source include/stop_replica.inc

# Generate a set of transactions on the primary.
# INSERT value is the equal to sequence number.
--echo [connection primary]
--connection primary
--let $i=2
while ($i != 11)
{
  --eval INSERT INTO t1 VALUES($i)
  --inc $i
}

--connection replica
--echo [connection replica]

# Incorrect START REPLICA UNTIL SQL_BEFORE_GTIDS
--replace_result $primary_uuid PRIMARY_UUID
--error ER_BAD_REPLICA_UNTIL_COND
--eval START REPLICA UNTIL SQL_BEFORE_GTIDS= "$primary_uuid:4-5", PRIMARY_LOG_FILE= 'foo.bin', PRIMARY_LOG_POS= 100

# Incorrect START REPLICA UNTIL SQL_BEFORE_GTIDS
--replace_result $primary_uuid PRIMARY_UUID
--error ER_BAD_REPLICA_UNTIL_COND
--eval START REPLICA SQL_THREAD UNTIL SQL_BEFORE_GTIDS= "$primary_uuid:4-5", PRIMARY_LOG_FILE= 'foo.bin', PRIMARY_LOG_POS= 100

# Incorrect START REPLICA UNTIL SQL_BEFORE_GTIDS
--replace_result $primary_uuid PRIMARY_UUID
--error ER_BAD_REPLICA_UNTIL_COND
--eval START REPLICA IO_THREAD UNTIL SQL_BEFORE_GTIDS= "$primary_uuid:4-5", PRIMARY_LOG_FILE= 'foo.bin', PRIMARY_LOG_POS= 100

# Incorrect START REPLICA UNTIL SQL_BEFORE_GTIDS
--replace_result $primary_uuid PRIMARY_UUID
--error ER_PARSE_ERROR
--eval START REPLICA FOO UNTIL SQL_BEFORE_GTIDS= "$primary_uuid:4-5"

# UNTIL GTID
--echo Check that START REPLICA IO_THREAD UNTIL ... maintains old behaviour, condition is ignored.
--replace_result $primary_uuid PRIMARY_UUID
--eval START REPLICA IO_THREAD UNTIL SQL_BEFORE_GTIDS= "$primary_uuid:4-5"

--echo Wait until IO Thread reads all primary binlog and stop replica.
--let $replica_param= Retrieved_Gtid_Set
--let $replica_param_value= $primary_uuid:1-10
--source include/wait_for_replica_param.inc
--source include/stop_replica_io.inc

--echo SQL thread must stop *before* INSERT 4
--replace_result $primary_uuid PRIMARY_UUID
--eval START REPLICA SQL_THREAD UNTIL SQL_BEFORE_GTIDS= "$primary_uuid:4-5"
--source include/wait_for_replica_sql_to_stop.inc
--let $assert_cond= MAX(c1)=3 FROM t1
--let $assert_text= Rows until 3 in t1 must be replicated now
--source include/assert.inc

--echo SQL thread must stop *after* INSERT 5
# SQL_AFTER_GTIDS is not working fine with MTS which is 'TODO'.  Hence post
# BUG14767986 fix 'ER_MTS_FEATURE_IS_NOT_SUPPORTED' warning will be thrown
# when MTS is enabled and server will be started in single threaded mode.
--disable_warnings
--replace_result $primary_uuid PRIMARY_UUID
--eval START REPLICA SQL_THREAD UNTIL SQL_AFTER_GTIDS= "$primary_uuid:4-5"
--enable_warnings
--source include/wait_for_replica_sql_to_stop.inc
--let $assert_cond= MAX(c1)=5 FROM t1
--let $assert_text= Rows until 5 in t1 must be replicated now
--source include/assert.inc

--echo SQL thread must stop *before* INSERT 6
--replace_result $primary_uuid PRIMARY_UUID
--eval START REPLICA SQL_THREAD, IO_THREAD UNTIL SQL_BEFORE_GTIDS= "$primary_uuid:2-7"
--source include/wait_for_replica_sql_to_stop.inc
--let $assert_cond= MAX(c1)=5 FROM t1
--let $assert_text= Rows until 5 in t1 must be replicated now
--source include/assert.inc

--echo SQL thread must stop *after* INSERT 5
--echo 1-5 are already applied so it will stop immediately
# SQL_AFTER_GTIDS is not working fine with MTS which is 'TODO'.  Hence post
# BUG14767986 fix 'ER_MTS_FEATURE_IS_NOT_SUPPORTED' warning will be thrown
# when MTS is enabled and server will be started in single threaded mode.
--disable_warnings
--replace_result $primary_uuid PRIMARY_UUID
--eval START REPLICA SQL_THREAD, IO_THREAD UNTIL SQL_AFTER_GTIDS= "$primary_uuid:1-5"
--enable_warnings
--source include/wait_for_replica_sql_to_stop.inc
--let $assert_cond= MAX(c1)=5 FROM t1
--let $assert_text= Rows until 5 in t1 must be replicated now
--source include/assert.inc

--echo SQL thread must stop *before* INSERT 10
--replace_result $primary_uuid PRIMARY_UUID
--enable_query_log
--eval START REPLICA UNTIL SQL_BEFORE_GTIDS= "$primary_uuid:10"
--source include/wait_for_replica_sql_to_stop.inc
--let $assert_cond= MAX(c1)=9 FROM t1
--let $assert_text= Rows until 9 in t1 must be replicated now
--source include/assert.inc

--echo SQL thread must stop *before* INSERT 3-6
--echo 3-6 is already applied so it will stop immediately
--replace_result $primary_uuid PRIMARY_UUID
--eval START REPLICA UNTIL SQL_BEFORE_GTIDS= "$primary_uuid:3-6"
--source include/wait_for_replica_sql_to_stop.inc
--let $assert_cond= MAX(c1)=9 FROM t1
--let $assert_text= Rows until 9 in t1 must be replicated now
--source include/assert.inc

--echo SQL thread must stop *before* INSERT 9
--echo 9 is already applied so it will stop immediately
--replace_result $primary_uuid PRIMARY_UUID
--eval START REPLICA UNTIL SQL_BEFORE_GTIDS= "$primary_uuid:9"
--source include/wait_for_replica_sql_to_stop.inc
--let $assert_cond= MAX(c1)=9 FROM t1
--let $assert_text= Rows until 9 in t1 must be replicated now
--source include/assert.inc

--echo Sync replica with primary
--source include/start_replica.inc
--replace_result $primary_uuid PRIMARY_UUID
--disable_result_log
--eval SELECT WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS('$primary_uuid:10')
--enable_result_log
--let $assert_cond= MAX(c1)=10 FROM t1
--let $assert_text= Rows until 10 in t1 must be replicated now
--source include/assert.inc

# Cleanup
--connection primary
DROP TABLE t1;
--source include/rpl_end.inc
