# Testing primary to replica heartbeat protocol
# 
# Including:
# - user interface, grammar, checking the range and warnings about 
#   unreasonable values for the heartbeat period;
# - no rotation of relay log if heartbeat is less that replica_net_timeout
# - SHOW STATUS like 'Replica_received_heartbeats' action
# - SHOW STATUS like 'Replica_heartbeat_period' report
# - SHOW STATUS like 'Replica_last_heartbeat' check

--source include/not_group_replication_plugin.inc
--let $rpl_skip_start_replica= 1
--let $rpl_skip_reset_primary_and_replica= 1
--let $rpl_skip_change_primary= 1
--source include/primary-replica.inc

connection replica;
set @restore_replica_net_timeout= @@global.replica_net_timeout;
set @@global.replica_net_timeout= 10;

#
# check for null value of the Replica_last_heartbeat variable when the replica is not enabled
#
--query_vertical SHOW STATUS LIKE "Replica_last_heartbeat"

###
### Checking the range
###

#
# default period replica_net_timeout/2
#
--replace_result $PRIMARY_MYPORT PRIMARY_PORT
--replace_column 2 ####
eval change primary to primary_host='127.0.0.1',primary_port=$PRIMARY_MYPORT, primary_user='root';
--query_vertical show status like 'Replica_heartbeat_period';

#
# the max for the period is ULONG_MAX/1000; an attempt to exceed it is  denied
#
--replace_result $PRIMARY_MYPORT PRIMARY_PORT
--replace_column 2 ####
--error ER_REPLICA_HEARTBEAT_VALUE_OUT_OF_RANGE
eval change primary to primary_host='127.0.0.1',primary_port=$PRIMARY_MYPORT, primary_user='root', primary_heartbeat_period= 4294968;
--query_vertical show status like 'Replica_heartbeat_period';

#
# the min value for the period is 1 millisecond an attempt to assign a
# lesser will be warned with treating the value as zero
#
connection replica;
--replace_result $PRIMARY_MYPORT PRIMARY_PORT
--replace_column 2 ####
### 5.1 mtr does not have --warning ER_REPLICA_HEARTBEAT_VALUE_OUT_OF_RANGE
eval change primary to primary_host='127.0.0.1',primary_port=$PRIMARY_MYPORT, primary_user='root', primary_heartbeat_period= 0.0009999;
--query_vertical show status like 'Replica_heartbeat_period';

#
# the actual max and min must be accepted
#
--replace_result $PRIMARY_MYPORT PRIMARY_PORT
--replace_column 2 ####
eval change primary to primary_host='127.0.0.1',primary_port=$PRIMARY_MYPORT, primary_user='root', primary_heartbeat_period= 4294967;
--query_vertical show status like 'Replica_heartbeat_period';

--replace_result $PRIMARY_MYPORT PRIMARY_PORT
--replace_column 2 ####
eval change primary to primary_host='127.0.0.1',primary_port=$PRIMARY_MYPORT, primary_user='root', primary_heartbeat_period= 0.001;
--query_vertical show status like 'Replica_heartbeat_period';

reset replica;

#
# A warning if period greater than replica_net_timeout
#
set @@global.replica_net_timeout= 5;
--replace_result $PRIMARY_MYPORT PRIMARY_PORT
--replace_column 2 ####
eval change primary to primary_host='127.0.0.1',primary_port=$PRIMARY_MYPORT, primary_user='root', primary_heartbeat_period= 5.001;
--query_vertical show status like 'Replica_heartbeat_period';

reset replica;

#
# A warning if replica_net_timeout is set to less than the current HB period
#
set @@global.replica_net_timeout= 5;
--replace_result $PRIMARY_MYPORT PRIMARY_PORT
--replace_column 2 ####
eval change primary to primary_host='127.0.0.1',primary_port=$PRIMARY_MYPORT, primary_user='root', primary_heartbeat_period= 4;
--query_vertical show status like 'Replica_heartbeat_period';
set @@global.replica_net_timeout= 3 /* must be a warning */;

reset replica;


###
### checking no rotation
###

connection primary;
--disable_warnings
drop table if exists t1;
--enable_warnings
#
# Even though primary_heartbeat_period= 0.5 is 20 times less than
# @@global.replica_net_timeout= 10 in some circumstances primary will
# not be able to send any heartbeat during the replica's net timeout
# and replica's relay log will rotate.
# The probability for such a scenario is pretty small so the following
# part is almost deterministic.
#

connection replica;
set @@global.replica_net_timeout= 10;
--replace_result $PRIMARY_MYPORT PRIMARY_PORT
# no error this time but rather a warning
--replace_column 2 ####
eval change primary to primary_host='127.0.0.1',primary_port=$PRIMARY_MYPORT, primary_user='root', primary_heartbeat_period= 0.5;
--query_vertical show status like 'Replica_heartbeat_period';

start replica;

connection primary;
create table t1 (f1 int);

#connection replica;
--source include/sync_replica_sql_with_primary.inc
let $replica_param= Relay_Log_File;
let $replica_param_value= query_get_value(SHOW REPLICA STATUS, Relay_Log_File, 1);

# there is an explicit sleep lasting longer than replica_net_timeout
# to ensure that nothing will come to replica from primary for that period.
# That would cause reconnecting and relaylog rotation w/o the fix i.e
# without a heartbeat received.

real_sleep 15;

# check (compare with the previous show's results) that no rotation happened
source include/check_replica_param.inc;

###
### SHOW STATUS like 'Replica_heartbeat_period' and 'Replica_received_heartbeats'
###

--query_vertical show status like 'Replica_heartbeat_period';

#
# proof that there has been received at least one heartbeat;
# The exact number of received heartbeat is an indeterministic value
# and therefore it's not recorded into results.
#

let $replica_wait_param_counter= 300;
let $replica_value= query_get_value("SHOW STATUS like 'Replica_received_heartbeats'", Value, 1);
# Checking the fact that at least one heartbeat is received
while (!$replica_value)
{
  dec $replica_wait_param_counter;
  if (!$replica_wait_param_counter)
  {
    --echo ERROR: failed while waiting for replica parameter $replica_param: $replica_param_value
    query_vertical show replica status;
    SHOW STATUS like 'Replica_received_heartbeats';
    exit;
  }
  sleep 0.1;
  let $replica_value= query_get_value("SHOW STATUS like 'Replica_received_heartbeats'", Value, 1);
}
--echo A heartbeat has been received by the replica

#
# check for non-null value of the Replica_last_heartbeat variable when the replica is enabled
#
--let $assert_text= Replica_last_heartbeat should not be empty
--let $assert_cond= \'[SHOW STATUS LIKE "Replica_last_heartbeat", Value, 1]\' != "" 
--source include/assert.inc  

# cleanup

connection primary;
drop table t1;

#connection replica;
--source include/sync_replica_sql_with_primary.inc
set @@global.replica_net_timeout= @restore_replica_net_timeout;


# ==== Bug#18185490: IF PRIMARY_HEARTBEAT_PERIOD OPTION IS NOT PROVIDED IT IS AUTO SETTING TO DEFAULT ====

# Change primary was always resetting the heartbeat period to default value
# and received heartbeat to 0 on change primary. After the bug fix,
# change primary should only change heartbeat_period if the corresponding option
# is given and never change Replica_received_heartbeat.


--connection replica
--source include/stop_replica.inc

CHANGE PRIMARY TO PRIMARY_HEARTBEAT_PERIOD= 10;

--let $assert_text= Replica_heartbeat_period should be 10.000
--let $assert_cond= [SHOW STATUS LIKE "Replica_heartbeat_period", Value, 1] = 10.000
--source include/assert.inc

--echo
--echo # Verify that heartbeat period is not reset to default implicitly and
--echo # received_heartbeat is not set to 0 by this.
--echo

CHANGE PRIMARY TO PRIMARY_RETRY_COUNT= 3;

--let $assert_text= Replica_heartbeat_period should be 10.000
--let $assert_cond= [SHOW STATUS LIKE "Replica_heartbeat_period", Value, 1] = 10.000
--source include/assert.inc

--let $assert_text= Replica_received_heartbeat should NOT be set to 0
--let $assert_cond= [SHOW STATUS LIKE "Replica_received_heartbeats", Value, 1] <> 0
--source include/assert.inc


###############################################################################
# BUG#18777899 HEARTBEAT_PERIOD AUTOMATICALLY SETS TO DEFAULT POST RESET REPLICA
#              COMMAND
#
# Due to the buggy behaviour, a RESET REPLICA command on the replica server
# reset heartbeat_period to default. RESET REPLICA is generally expected to
# delete replica logs and forget the replicaiton positions. This erroneous
# behavior was therefore un-intuitive.
#
# In the test we test the behaviour of heartbeat_period with RESET REPLICA,
# STOP REPLICA, CHANGE PRIMARY, START REPLICA and RESET REPLICA ALL.
#
# 1. RESET REPLICA:
#    ===========
#
#    Execute a RESET REPLICA and verify that the heartbeat_period is what we
#    set in the latest CHANGE PRIMARY and not the the default value.
#
# 2. CHANGE PRIMARY, START REPLICA:
#    ==========================
#
# a. Changing host resets heartbeat_period to default.
# b. Changing port resets heartbeat_period to default.
# c. changing host and port resets heartbeat_period to default.
#
# 3. RESET REPLICA ALL:
#    ===============
#
#    Execute a RESET REPLICA ALL and verify that the heartbeat_period is set to 0.
###############################################################################

--source include/stop_replica.inc
RESET REPLICA;
--source include/start_replica.inc

--let $assert_cond= [SHOW STATUS LIKE "Replica_heartbeat_period", Value, 1] = 10.000
--let $assert_text= heartbeat period should still be 10.000 after RESET REPLICA.
--source include/assert.inc

--source include/stop_replica_io.inc
--replace_result $PRIMARY_MYPORT PRIMARY_PORT
eval CHANGE PRIMARY TO PRIMARY_HOST= 'localhost', PRIMARY_PORT= $PRIMARY_MYPORT;
--source include/start_replica.inc

--let $default_heartbeat_period= @@global.replica_net_timeout/2;
--let $assert_cond= [SHOW STATUS LIKE "Replica_heartbeat_period", Value, 1] = $default_heartbeat_period
--let $assert_text= heartbeat period should reset to default.
--source include/assert.inc

--echo #
--echo # Change from default to make sure changing HOST resets heartbeat_period
--echo # to default.
--echo #
--source include/stop_replica_io.inc
CHANGE PRIMARY TO PRIMARY_HEARTBEAT_PERIOD = 10;
--source include/start_replica.inc

--source include/stop_replica.inc
eval CHANGE PRIMARY TO PRIMARY_HOST= '127.0.0.1';
--source include/start_replica.inc

--let $assert_cond= [SHOW STATUS LIKE "Replica_heartbeat_period", Value, 1] = $default_heartbeat_period
--let $assert_text= heartbeat period should reset to default on changing host.
--source include/assert.inc

--echo #
--echo # Change from default to make sure changing PORT resets heartbeat_period
--echo # to default.
--echo #
--source include/stop_replica.inc
--replace_result $PRIMARY_MYPORT PRIMARY_PORT
CHANGE PRIMARY TO PRIMARY_HEARTBEAT_PERIOD = 10;
--source include/start_replica.inc

--source include/stop_replica.inc
--replace_result $PRIMARY_MYPORT PRIMARY_PORT
eval CHANGE PRIMARY TO PRIMARY_PORT= $PRIMARY_MYPORT;
--source include/start_replica.inc

--let $assert_cond= [SHOW STATUS LIKE "Replica_heartbeat_period", Value, 1] = $default_heartbeat_period
--let $assert_text= heartbeat period should reset to default on changing port.
--source include/assert.inc

--echo #
--echo # Change from default to make sure changing HOST and PORT resets
--echo # heartbeat_period to default.
--echo #
--source include/stop_replica.inc
--replace_result $PRIMARY_MYPORT PRIMARY_PORT
eval CHANGE PRIMARY TO PRIMARY_HOST= '127.0.0.1', PRIMARY_PORT= $PRIMARY_MYPORT;
--source include/start_replica.inc

--let $assert_cond= [SHOW STATUS LIKE "Replica_heartbeat_period", Value, 1] = $default_heartbeat_period
--let $assert_text= heartbeat period should reset to default on changing host and port.
--source include/assert.inc

--source include/stop_replica.inc
RESET REPLICA ALL;

--let $assert_cond= [SHOW STATUS LIKE "Replica_heartbeat_period", Value, 1] = 0.000
--let $assert_text= heartbeat period should reset to zero by RESET REPLICA ALL.
--source include/assert.inc

# Make this a replica again to successfully pass through cleanup routines.
--replace_result $PRIMARY_MYPORT PRIMARY_PORT
--replace_column 2 ####
--eval change primary to primary_host= '127.0.0.1', primary_port= $PRIMARY_MYPORT, primary_user= 'root'

# The table might have replicated again after RESET REPLICA.
--source include/start_replica.inc
--connection primary
--disable_warnings
DROP TABLE IF EXISTS t1;
--source include/sync_replica_sql_with_primary.inc
--enable_warnings

--source include/rpl_end.inc
