######################################################################
# Some errors that cause the replica SQL thread to stop are not shown in 
# the Replica_SQL_Error column of "SHOW REPLICA STATUS". Instead, the error 
# is only in the server's error log.
#
# Two failures and their respective reporting are verified:
#             
# 1 - Failures during replica thread initialization
# 2 - Failures while processing queries passed through the init_replica
# option.
#
# In order to check the first type of failure, we inject a fault in the 
# SQL/IO Threads through SET GLOBAL debug.
#
# To check the second type, we set @@global.init_replica to an invalid 
# command thus preventing the initialization of the SQL Thread.
#
# Obs:
# 1 - Note that testing failures while initializing the relay log position 
# is hard as the same function is called before the code reaches the point 
# that we want to test.
#
# 2 - This test does not target failures that are reported while applying 
# events such as duplicate keys, errors while reading the relay-log.bin*, 
# etc. Such errors are already checked on other tests.
######################################################################

######################################################################
#                    Configuring the Environment
######################################################################
source include/have_debug.inc;
source include/primary-replica.inc;
source include/have_log_bin.inc;

connection replica;

--disable_warnings
stop replica;
--enable_warnings
reset replica;

######################################################################
#           Injecting faults in the threads' initialization
######################################################################
connection replica;

# Set debug flags on replica to force errors to occur
SET GLOBAL debug= "d,simulate_io_replica_error_on_init,simulate_sql_replica_error_on_init";

start replica;

#
# replica is going to stop because of emulated failures
# but there won't be any crashes nor asserts hit.
#
--let $replica_sql_errno= convert_error(ER_REPLICA_FATAL_ERROR)
--let $show_replica_sql_error= 1
--source include/wait_for_replica_sql_error.inc

SET SESSION sql_log_bin= 0;
call mtr.add_suppression("Failed during replica.* thread initialization");
SET SESSION sql_log_bin= 1;

# Bug#11765758 - 58754
# above tests part logics make sure the IO thread is down to allow 
# safe updating to @@global.debug
--let $replica_io_errno= convert_error(ER_REPLICA_FATAL_ERROR)
--let $show_replica_io_error= 1
--source include/wait_for_replica_io_error.inc

SET GLOBAL debug= "";

######################################################################
#             Injecting faults in the init_replica option
######################################################################
connection replica;

reset replica;

SET GLOBAL init_replica= "garbage";

start replica;
# 1064 = ER_PARSE_ERROR
--let $replica_sql_errno= 1064
--let $show_replica_sql_error= 1
--source include/wait_for_replica_sql_error.inc

######################################################################
#                             Clean up
######################################################################
SET GLOBAL init_replica= "";

# Clean up Last_SQL_Error
--source include/stop_replica_io.inc
RESET REPLICA;
--let $rpl_only_running_threads= 1
--source include/rpl_end.inc
