source include/not_windows.inc;
--source include/not_group_replication_plugin.inc
source include/not_gtid_enabled.inc;
source include/primary-replica.inc;

#
# BUG#28421 Infinite loop on replica relay logs
# 
# That, manually deleteing one or more entries from 'primary-bin.index', will
# cause primary infinitely loop to send one binlog file.
# 
# Manually changing index file is a illegal action, so when this happen, we
# send a fatal error to replica and close the dump session.

FLUSH LOGS;
# Now, 2 entries in index file.
# ./primary-bin.000001
# ./primary-bin.000002

CREATE TABLE t1(c1 INT);
# Now, the current dump file(primary-bin.000002) is the second line of index
# file
--source include/sync_replica_sql_with_primary.inc
# Now, all events has been replicate to replica. As current dump file
# (primary-bin.000002) is the last binlog file, so primary is waiting for new
# events.

connection primary;
# Delete './primary-bin.000001' from index file.
let $MYSQLD_DATADIR= `SELECT @@DATADIR`;
let $file= $MYSQLD_DATADIR/primary-bin.index;
source include/truncate_file.inc;

if (`SELECT CONVERT(@@VERSION_COMPILE_OS USING latin1) NOT IN ('Win32', 'Win64', 'Windows')`)
{
append_file $MYSQLD_DATADIR/primary-bin.index;
./primary-bin.000002
EOF
sleep 0.00000001;
}

if (`SELECT CONVERT(@@VERSION_COMPILE_OS USING latin1) IN ('Win32', 'Win64', 'Windows')`)
{
append_file $MYSQLD_DATADIR/primary-bin.index;
.\primary-bin.000002
EOF
sleep 0.00000001;
}

# Now, only 1 entry in index file.  ./primary-bin.000002

# Generate primary-bin.000003, but it is in the second line.
FLUSH LOGS;
# Now, 2 entries in index file.
# ./primary-bin.000002
# ./primary-bin.000003

# Now, primary know that new binlog file(primary-bin.000003) has been generated.
# It expects that the new binlog file is in third line of index file, but
# there is no third line in index file. It is so strange that primary sends an
# error to replica. 
call mtr.add_suppression('Got fatal error 1236 from primary when reading data from binary log: .*could not find next log');
connection replica;
# 1236 = ER_PRIMARY_FATAL_ERROR_READING_BINLOG
--let $replica_io_errno= 1236
--let $show_replica_io_error= 1
# Mask line numbers
--let $replica_io_error_replace= / at [0-9]*/ at XXX/
--source include/wait_for_replica_io_error.inc

connection primary;

source include/truncate_file.inc;

if (`SELECT CONVERT(@@VERSION_COMPILE_OS USING latin1) NOT IN ('Win32', 'Win64', 'Windows')`)
{
append_file $MYSQLD_DATADIR/primary-bin.index;
./primary-bin.000001
./primary-bin.000002
./primary-bin.000003
EOF
sleep 0.00000001;
}

if (`SELECT CONVERT(@@VERSION_COMPILE_OS USING latin1) IN ('Win32', 'Win64', 'Windows')`)
{
append_file $MYSQLD_DATADIR/primary-bin.index;
.\primary-bin.000001
.\primary-bin.000002
.\primary-bin.000003
EOF
sleep 0.00000001;
}

CREATE TABLE t2(c1 INT);
FLUSH LOGS;
CREATE TABLE t3(c1 INT);
FLUSH LOGS;
CREATE TABLE t4(c1 INT);

connection replica;
START REPLICA IO_THREAD;
source include/wait_for_replica_io_to_start.inc;

connection primary;
--source include/sync_replica_sql_with_primary.inc
SHOW TABLES;

connection primary;
DROP TABLE t1, t2, t3, t4;
--source include/sync_replica_sql_with_primary.inc

--echo
--echo # BUG#21437 server_errno=29 error message flood mysqld error log
--echo # --------------------------------------------------------------------------
--echo # This test verifies if the ER_PRIMARY_FATAL_ERROR_READING_BINLOG which
--echo # insteads of EE_FILENOTFOUND error is sent to replica, so that the replica
--echo # I/O thread stops immediately.

--source include/rpl_reset.inc
connection primary;
--echo [ on primary ]
call mtr.add_suppression("Got fatal error 1236 from primary when reading data from binary log:");
let $PRIMARY_DATADIR= `SELECT @@DATADIR`;
CREATE TABLE t1(c1 int);
DROP TABLE t1;

FLUSH LOGS;

CREATE TABLE t2(c1 int);
DROP TABLE t2;
--source include/sync_replica_sql_with_primary.inc
--echo [ on replica ]
source include/stop_replica.inc;

connection primary;
--echo [ on primary ]
--echo # This operation will result in error EE_FILENOTFOUND which happens
--echo # when replica IO thread is connecting to primary.
move_file $PRIMARY_DATADIR/primary-bin.000001 $PRIMARY_DATADIR/primary-bin.bak;

connection replica;
--echo [ on replica ]
CHANGE PRIMARY TO primary_host='127.0.0.1', primary_log_file='primary-bin.000001';
START REPLICA IO_THREAD;
--echo # Instead of EE_FILENOTFOUND, ER_PRIMARY_FATAL_ERROR_READING_BINLOG
--echo # and the specific information are sent to replica.
--let $replica_io_errno= 1236
--let $show_replica_io_error= 1
--source include/wait_for_replica_io_error.inc

connection primary;
--echo [ on primary ]
--echo # Restore primary-bin.000001 file
move_file $PRIMARY_DATADIR/primary-bin.bak $PRIMARY_DATADIR/primary-bin.000001;

connection replica;
--echo [ on replica ]
CHANGE PRIMARY TO primary_host='127.0.0.1', primary_log_file='primary-bin.000002';
source include/start_replica.inc;

connection primary;
--echo [ on primary ]
CREATE TABLE t1(c1 INT);
--source include/sync_replica_sql_with_primary.inc
--echo [ on replica ]
SELECT * FROM t1;

connection primary;
DROP TABLE t1;

--source include/rpl_end.inc

