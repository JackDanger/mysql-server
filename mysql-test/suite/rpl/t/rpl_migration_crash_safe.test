########################################################################################
# This test verifies if the server migrates correctly from a file repository to a
# table repository and vice-versa. In particular, it checks if the information in the
# relay log info is correctly migrated between the different types (i.e. FILE or TABLE)
# of repositories. The algorithm and the function used to migrate the primary info is
# the same and for that reason, we do not test its migration.
# 
# If a FILE repository is used, the following assertions are valid:
#   AF1. SELECT COUNT(*) FROM mysql.replica_relay_log_info == 0
#   AF2. file_exists $MYSQLD_DATADIR/relay-log.info == 1
#
# If a TABLE repository is used, the following assertions are valid:
#   AT1. SELECT COUNT(*) FROM mysql.replica_relay_log_info == 1
#   AT2. file_exists $MYSQLD_DATADIR/relay-log.info == 0
#
# The test case is organized as follows:
#
# 1. Preparation:
#   1.1. The replica is started with a FILE repository enabled and the replication
#   stopped.
#   1.2. A table is created and populated in order to check at the end of the test
#   if data is replicated correctly.
#   1.3. Assertions AF1 and AF2 are verified.
#
# 2. Migration from FILE to TABLE by restarting the SERVER
#   2.1. The replica is stopped and restarted with --relay-log-info-repository=TABLE
#   2.2. Assertions AT1 and AT2 are verified.
#
# 3. Migration from TABLE to FILE by restarting the SERVER
#   4.1. The replica is stopped and restarted with --relay-log-info-repository=FILE
#   4.2. Assertions AF1 and AF2 are verified.
#
# 4. Migration from FILE to TALBE by using SET
#   4.1. SET @GLOBAL.relay_log_info_repository=TABLE is exectued.
#   4.2. Assertions AT1 and AT2 are verified.
#
# 5. Migration from TABLE to FILE by using SET
#   5.1. SET @GLOBAL.relay_log_info_repository=FILE is executed.
#   5.2. Assertions AF1 and AF2 are verified.
#
# 6. Migration from FILE to FILE by using SET
#   6.1. SET @GLOBAL.relay_log_info_repository=FILE is executed.
#   6.2. Assertions AF1 and AF2 are verified.
#
# 7. Migration while replica is running by using SET
#   7.1  Replica is started.
#   7.2. SET @GLOBAL.relay_log_info_repository=FILE is executed and fails.
#   7.3. Assertions AF1 and AF2 are verified.
#
# 8. Check consistency
#   8.1. The replication is started and the primary is compared to the replica.
########################################################################################
########################################################################################
# 1. Preparation
########################################################################################
--source include/not_group_replication_plugin.inc
--source include/not_embedded.inc
--source include/not_valgrind.inc
--source include/not_relay_log_info_table.inc
--source include/not_mts_replica_parallel_workers.inc
--source include/primary-replica.inc

--connection replica

let $MYSQLD_DATADIR= `SELECT @@datadir`;

let $exp_replica= 0;
let $got_replica= `SELECT COUNT(*) FROM mysql.replica_relay_log_info`;
if ($got_replica != $exp_replica)
{
  --echo "The mysql.replica_relay_log_info has information and this is not expected."
  --die
}
file_exists $MYSQLD_DATADIR/relay-log.info;

--source include/stop_replica.inc

--connection primary

CREATE TABLE test(id INTEGER NOT NULL PRIMARY KEY);
INSERT INTO test VALUES (1), (2), (3);

########################################################################################
# 2. Migration from FILE to TABLE by restarting the SERVER
########################################################################################
--connection replica

--let $rpl_server_number= 2
--let $rpl_server_parameters= --relay-log-info-repository=TABLE --skip-replica-start
--source include/rpl_restart_server.inc

let $exp_replica= 1;
let $got_replica= `SELECT COUNT(*) FROM mysql.replica_relay_log_info`;
if ($got_replica != $exp_replica)
{
  --echo "The mysql.replica_relay_log_info has no information and this is not expected."
  --die
}
--error 1
file_exists $MYSQLD_DATADIR/relay-log.info;

########################################################################################
# 3. Migration from TABLE to FILE by restarting the SERVER
########################################################################################
--connection replica

--let $rpl_server_number= 2
--let $rpl_server_parameters= --relay-log-info-repository=FILE --skip-replica-start
--source include/rpl_restart_server.inc

let $exp_replica= 0;
let $got_replica= `SELECT COUNT(*) FROM mysql.replica_relay_log_info`;
if ($got_replica != $exp_replica)
{
  --echo "The mysql.replica_relay_log_info has information and this is not expected."
  --die
}
file_exists $MYSQLD_DATADIR/relay-log.info;

########################################################################################
# 4. Migration FROM FILE TO TABLE by using SET
########################################################################################
--connection replica

SET @@GLOBAL.relay_log_info_repository= "TABLE";

let $exp_replica= 1;
let $got_replica= `SELECT COUNT(*) FROM mysql.replica_relay_log_info`;
if ($got_replica != $exp_replica)
{
  --echo "The mysql.replica_relay_log_info has no information and this is not expected."
  --die
}
--error 1
file_exists $MYSQLD_DATADIR/relay-log.info;

########################################################################################
# 5. Migration FROM TABLE TO FILE by using SET
########################################################################################
--connection replica

SET @@GLOBAL.relay_log_info_repository= "FILE";

let $exp_replica= 0;
let $got_replica= `SELECT COUNT(*) FROM mysql.replica_relay_log_info`;
if ($got_replica != $exp_replica)
{
  --echo "The mysql.replica_relay_log_info has information and this is not expected."
  --die
}
file_exists $MYSQLD_DATADIR/relay-log.info;

########################################################################################
# 6. Migration FROM FILE TO FILE by using SET
########################################################################################
--connection replica

SET @@GLOBAL.relay_log_info_repository= "FILE";

let $exp_replica= 0;
let $got_replica= `SELECT COUNT(*) FROM mysql.replica_relay_log_info`;
if ($got_replica != $exp_replica)
{
  --echo "The mysql.replica_relay_log_info has information and this is not expected."
  --die
}
file_exists $MYSQLD_DATADIR/relay-log.info;

########################################################################################
# 7. Migration while replica is running by using SET
########################################################################################
--connection replica

#
# If the replica info repository is X, and the user sets the same repository
# again there is no need to stop the replica threads and the control return
# to client thread without doing anything. To make the test case pass in
#  crash-safe-primary i.e when --primary-info-repository=TABLE, we convert
#  the repo to FILE.
SET @@GLOBAL.primary_info_repository= "FILE";

--source include/start_replica.inc

--error ER_REPLICA_CHANNEL_MUST_STOP
SET @@GLOBAL.relay_log_info_repository= "TABLE";

--error ER_REPLICA_CHANNEL_MUST_STOP
SET @@GLOBAL.primary_info_repository= "TABLE";

########################################################################################
# 8. Check consistency
########################################################################################
--connection primary

--source include/sync_replica_sql_with_primary.inc
--exec $MYSQL_DUMP --compact --order-by-primary --skip-extended-insert --no-create-info test > $MYSQLD_DATADIR/test-migration-primary.sql
--exec $MYSQL_DUMP_REPLICA --compact --order-by-primary --skip-extended-insert --no-create-info test > $MYSQLD_DATADIR/test-migration-replica.sql
--diff_files $MYSQLD_DATADIR/test-migration-primary.sql $MYSQLD_DATADIR/test-migration-replica.sql

--connection primary

DROP TABLE test;
--source include/sync_replica_sql_with_primary.inc
