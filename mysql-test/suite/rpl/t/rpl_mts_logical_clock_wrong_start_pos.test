#
# The test verifies expected behaviour when
# the replica retries events starting from group internal position.
# Their execution in Logical_Clock mode is allowed.
# See bug#19473291.
# Notice that old primary events are viewed effectively as
# malformed group events. Therefore this test applies to cross-version replication
# as well.
#
# GTIDs are expected in binlog when events are indexed by query_get_value below
--source include/have_gtid.inc
--source include/have_binlog_format_mixed.inc
--source include/primary-replica.inc

# Logic of the test is as the following.
# Configure MTS with few workers and LOGICAL_CLOCK scheduler.
# Replicate some events.
# Stop replica threads to reconfigure retrival from an already read, executed and
# group internal position (COMMIT/Xid event position is chosen to avoid
# a GTID specific error).
# Restart replica threads and observe the SQL applier has processed events.

--source include/rpl_connection_replica.inc
call mtr.add_suppression("Either event.*is from an old primary");
# The transaction boundary parser will log the following two warning messages:
call mtr.add_suppression("An unexpected event sequence was detected by the IO thread");
call mtr.add_suppression("QUERY.* is not expected in an event stream");

--source include/stop_replica.inc

SET @save_replica_parallel_type = @@GLOBAL.replica_parallel_type;
SET @save_replica_parallel_workers = @@GLOBAL.replica_parallel_workers;
SET @save_replica_transaction_retries = @@GLOBAL.replica_transaction_retries;

SET GLOBAL replica_parallel_type = LOGICAL_CLOCK;
SET GLOBAL replica_parallel_workers = 2;
SET GLOBAL replica_transaction_retries = 0;
--source include/start_replica.inc

--source include/rpl_connection_primary.inc
CREATE TABLE t1(a INT);
INSERT INTO t1 SET a=1;
--let $binlog_file= query_get_value("SHOW PRIMARY STATUS", File, 1)
--let $logged_query= query_get_value(SHOW BINLOG EVENTS IN "$binlog_file" FROM 4, Info, 7)
--let $query_pos= query_get_value(SHOW BINLOG EVENTS IN "$binlog_file" FROM 4, End_log_pos,7)

--source include/sync_replica_sql_with_primary.inc
--source include/stop_replica.inc
--replace_result $query_pos QUERY_POS
--eval CHANGE PRIMARY TO PRIMARY_LOG_POS=$query_pos, PRIMARY_AUTO_POSITION=0
--source include/start_replica_io.inc
START REPLICA SQL_THREAD;

#
# Cleanup
#
--source include/rpl_connection_primary.inc
DROP TABLE t1;

--source include/sync_replica_sql_with_primary.inc
--source include/stop_replica.inc
SET GLOBAL replica_parallel_workers = @save_replica_parallel_workers;
SET GLOBAL replica_parallel_type = @save_replica_parallel_type;
SET GLOBAL replica_transaction_retries = @save_replica_transaction_retries;
--source include/start_replica.inc

--source include/rpl_end.inc
