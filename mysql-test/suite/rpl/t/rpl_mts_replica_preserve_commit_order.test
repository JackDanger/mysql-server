# This test check if the option replica-preserve-commit order
# preserves the commit order with replica binlog enabled.
--source include/not_group_replication_plugin.inc
--source include/have_debug.inc
--source include/have_debug_sync.inc
--source include/primary-replica.inc

# METHOD: We will do some inserts of continious integers into a t1.a
# and enable a forced parallelization. These transactions are applied in
# parallel on the replica. We re-apply the transactions in replica binlog another
# table which contains an additional column (id) of auto increment integer.
# If trasactions are written in order into the replica binlog, then after
# reapplying there will be no rows where t.id != t.a
#
# This script is used with logical clock based MTS.
#

--source include/rpl_connection_primary.inc
CREATE TABLE t1 (a INT) ENGINE = InnoDB;

--source include/sync_replica_sql_with_primary.inc
--source include/rpl_connection_replica.inc
# Make all following INSERTs into the 2nd binlog.
FLUSH BINARY LOGS;
if (`SELECT @@GLOBAL.gtid_mode = "ON"`)
{
  --disable_query_log
  SET @gtid_set_before_insert = @@GLOBAL.gtid_executed;
  --enable_query_log
}

--echo #
--echo # Verify the transactions are ordered correctly on replica
--echo #
--source include/rpl_connection_primary.inc
# Make the following INSERTs have same commit parent. So they can be applied
# parallel on replica.
SET @save_debug = @@GLOBAL.debug;
SET GLOBAL debug = "d,set_commit_parent_100";

# In each iteration, the primary generates some transactions which can be applied
# parallel. Replica is running in MTS mode and has 6 workers. To guarantee all
# transactions are put into the queue togeter, LOCK TABLES is used to block
# workers. After all transactions are in the queue, then UNLOCK TABLES is
# called and all workers can resume.

--let $iteration = 1
# value is from 1 to 21
--let $value = 1

while ($iteration <= 6)
{
  --source include/rpl_connection_replica.inc
  LOCK TABLE t1 WRITE;

  --source include/rpl_connection_primary.inc
  --let $row_count= 1
  while ($row_count <= $iteration)
  {
    --eval INSERT INTO t1(a) VALUES ($value)
    --inc $value
    --inc $row_count
  }
  --source include/save_primary_pos.inc

  --source include/rpl_connection_replica.inc
  # Wait until all workers are blocked by LOCK TABLE t1 WRITE. It implies all
  # transactions are registered into the order commit queue.
  let $wait_condition= SELECT count(*) = $iteration FROM INFORMATION_SCHEMA.PROCESSLIST WHERE State = 'Waiting for table metadata lock';
  --source include/wait_condition.inc

  UNLOCK TABLES;
  --source include/sync_replica_sql.inc
  SET DEBUG_SYNC = 'RESET';
  --inc $iteration
}

#
# Verify above INSERTs are in the same order as primary
#
--source include/rpl_connection_replica.inc
--let $REPLICA_MYSQLD_DATADIR= `SELECT @@DATADIR`
--let $binlog_file= query_get_value(SHOW PRIMARY STATUS, File, 1)
--copy_file $REPLICA_MYSQLD_DATADIR/$binlog_file $MYSQL_TMP_DIR/$binlog_file

# Replica's binlog will be replied one by one later through mysql. The table is
# recreated with an extra auto increment field. The new field 'id' will be
# filled by server automatically when replying replica's binlog. So It exactly
# records the binlogging order of the transactions.

DROP TABLE t1;
CREATE TABLE t1 (a INT, id INT AUTO_INCREMENT KEY) ENGINE = InnoDB;

# To clear gtid set when gtid mode is ON.
if (`SELECT @@GLOBAL.gtid_mode = "ON"`)
{
  --disable_query_log
  RESET PRIMARY;
  SET @@global.gtid_purged= @gtid_set_before_insert;
  --enable_query_log
}

# Replay replica's binlog
--exec $MYSQL_BINLOG $MYSQL_TMP_DIR/$binlog_file |$MYSQL_REPLICA

# The transactions should be binlogged in the same order as they are binlogged
# on primary. Because the transactions inserts consecutive numbers starting from
# 1 and id starts from 1 and step 1 for each transaction. The table's data should
# look like:
# id    a
# 1     1
# 2     2
# ...  ...
# n     n
# It means the values of field 'id' are always same to the values of field 'a'
SELECT * FROM t1 WHERE id <> a;

--let $assert_text= 'There are no mismatched rows'
--let $assert_cond= [SELECT  COUNT(*) AS count FROM t1 WHERE t1.id <> t1.a, count, 1] = 0
--source include/assert.inc

--let $assert_text= 'There are no row which is null'
--let $assert_cond= [SELECT  COUNT(*) AS count FROM t1 WHERE t1.a is NULL, count, 1] <= 0
--source include/assert.inc

--let $assert_text= 'There are 21 rows'
--let $assert_cond= [SELECT COUNT(*) AS count FROM t1, count, 1] = 21
--source include/assert.inc

--remove_file $MYSQL_TMP_DIR/$binlog_file

--source include/rpl_connection_primary.inc
SET GLOBAL debug = @save_debug;

DROP TABLE t1;
--source include/sync_replica_sql_with_primary.inc

--echo #
--echo # Verify that it will generate a warning if replica-preserve-commit is
--echo # used with DB PARTITIONED MTS together
--echo #
--source include/stop_replica_sql.inc
SET GLOBAL replica_parallel_type = 'DATABASE';
--error ER_DONT_SUPPORT_REPLICA_PRESERVE_COMMIT_ORDER
START REPLICA SQL_THREAD;

SET GLOBAL replica_parallel_type = 'LOGICAL_CLOCK';
--let rpl_only_running_threads= 1;
--source include/rpl_end.inc

