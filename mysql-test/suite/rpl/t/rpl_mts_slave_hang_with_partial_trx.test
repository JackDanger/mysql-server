# ==== Purpose ====
#
# Verify if the MTS SQL thread will became unresponsive after the replica
# applied a partial transaction (without the XID event) followed by a
# ROTATE event caused by IO thread reconnection when GTIDs and auto
# positioning are enabled.
#
# ==== Related Bugs and Worklogs ====
#
# BUG#17326020 ASSERTION ON REPLICA AFTER STOP/START REPLICA USING MTS+GTID
#              REPLICATION
# BUG#18885916 RELAY LOG WITHOUT XID_LOG_EVENT MAY CASE PARALLEL
#              REPLICATION HANG
#
# ==== Implementation ====
#
# This test uses debug points on the replica to make the
# IO thread to stop right after queuing a WRITE_ROWS log event.
#
# By doing this, the relay log file with the partial transaction
# will contain: [GTID,] QUERY(BEGIN), TABLE_MAP and WRITE_ROWS, but
# won't have the XID for the transaction.
#
# After reconnecting to the primary, if the replica is configured with
# GTID and auto positioning, the IO thread will request the whole
# transaction again.
#
# The test case will then sync the replica with the primary and verify
# that all data was correctly applied on replica.
#

--source include/not_group_replication_plugin.inc
# This test case uses a debug point based on RBR
--source include/have_binlog_format_row.inc
--source include/have_debug.inc
--source include/primary-replica.inc

--source include/rpl_connection_replica.inc
# Prepare the replica IO thread to stop after queuing a WRITE_ROWS event
SET @save_debug=@@global.debug;
SET GLOBAL DEBUG= "d,stop_io_after_reading_write_rows_log_event";

# Put some data in to the primary
--source include/rpl_connection_primary.inc
CREATE TABLE t1 (c1 INT) ENGINE=InnoDB;
# This transaction will be split
BEGIN;
INSERT INTO t1 (c1) VALUES (1);
COMMIT;
# This transaction will not be split
BEGIN;
INSERT INTO t1 (c1) VALUES (2);
COMMIT;

# Wait the replica IO thread to reach the debug point
--source include/rpl_connection_replica.inc
--source include/wait_for_replica_io_to_stop.inc
# Remove the debug point, so the IO thread will not stop after
# queuing a WRITE_ROWS event anymore
SET GLOBAL DEBUG= @save_debug;

# Restart replica I/O thread
--source include/start_replica_io.inc

# Sync the replica with the primary
--source include/rpl_connection_primary.inc
--source include/sync_replica_sql_with_primary.inc

# Final data verification
--source include/rpl_connection_primary.inc
--source include/sync_replica_sql_with_primary.inc
--let diff_tables= primary:t1, replica:t1
--source include/diff_tables.inc

# Cleanup
--source include/rpl_connection_primary.inc
DROP TABLE t1;
--source include/rpl_end.inc
