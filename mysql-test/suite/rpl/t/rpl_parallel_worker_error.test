--source include/primary-replica.inc
--source include/have_binlog_format_statement.inc
--source include/only_mts_replica_parallel_workers.inc

#
# Proving correct error reporting by Worker in condition of the failing query
# size is close to that of internal buffer MAX_REPLICA_ERRMSG.
# bug#18563480 MTS: CRASH WHEN REPLICA WORKER TRY TO EXECUTE A BIG STATEMENT doomed to fail
#

# Create a table on the replica to set up future error on its creation
# via replication

--connection replica
call mtr.add_suppression("Replica SQL for channel '': Worker.*failed executing transaction");
call mtr.add_suppression("Replica SQL for channel '':.*The replica coordinator and worker threads are stopped");

--eval CREATE TABLE t (a TEXT) select "a" as a

# Create a query size of over MAX_REPLICA_ERRMSG = 1024

--connection primary

--let i=0
--let select_arg=a

while ($i < 1024)
{
    --inc $i
    --let $select_arg=a$select_arg
}

--eval CREATE TABLE t (a TEXT) select "$select_arg" as a

--connection replica

# Error is found as expected.
--let $replica_sql_errno= convert_error(ER_TABLE_EXISTS_ERROR)
--source include/wait_for_replica_sql_error.inc

# Remove replica side table, recover replica to catch up
DROP TABLE t;
--source include/start_replica_sql.inc

--connection primary
--source include/sync_replica_sql_with_primary.inc


#
# Cleanup
#

--connection primary
DROP TABLE t;
--source include/sync_replica_sql_with_primary.inc


--source include/rpl_end.inc
