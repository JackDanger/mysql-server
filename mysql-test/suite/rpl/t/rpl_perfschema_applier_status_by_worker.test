# ==== Purpose ====
#
# This test script serves as the functionality testing for the table
# performance_schema.replication_applier_status_by_coordinator. Test
# for ddl and dml operations is a part of the perfschema suite.
# The ddl/dml tests are named:
# 1) ddl_replication_applier_status_by_worker.test and
# 2) dml_replication_applier_status_by_worker.test.
#
# This test script does the following:

#  - Verify that SELECT works for every field in the table.
#  - The SELECT per field produces an output similar to the corresponding field
#    in SHOW REPLICA STATUS(SSS), if there is one.
#  - If there is no matching field in SSS, we resort to other method of testing
#    those fields.
#  - We perform all the testing on connection "replica". On primary, the table
#    returns an empty set.
#
# The follwing scenarios are tested in this test script:
#
#  - Test each field on a fresh replication setup.
#  - Introduce error in worker thread and check for the correctness of error
#    error number, message and timestamp.
#  - Verify that, the change in values are correctly shown by the table.
#  - Verify that the values are preserved after STOP REPLICA.
#  - Set up replication in gtid-mode=on and test 'Last_Seen_Transaction' field.
#  - Verify that the value in 'Last_Seen_Transaction' field is preserved after
#    STOP REPLICA.
#
#  ==== Related Bugs and Worklogs ====
#
#  WL#3656: PERFORMANCE SCHEMA table for SHOW REPLICA STATUS
#  Bug#18358253: RPL.RPL_PERFSCHEMA_EXECUTE_STATUS_BY_WORKER HAS SPORADIC FAILURES ON PB2
#
#  Bug #18360716 ERRORS IN MTS WORKER THREADS REPORTED WRONGLY FOR ANONYMOUS TRANSACTIONS
#  - The result file was updated after fixing this bug.

--source include/not_group_replication_plugin.inc
source include/not_gtid_enabled.inc;
source include/have_binlog_format_mixed.inc;
source include/primary-replica.inc;

call mtr.add_suppression("Error 'Table 'test.t' doesn't exist' on query.");
call mtr.add_suppression("The replica coordinator and worker threads are stopped, possibly leaving data in inconsistent state.");
call mtr.add_suppression("Request to stop replica SQL Thread received while applying a group that has non-transactional changes;");

let $assert_text= On primary, the table should return an empty set.;
let $assert_cond= [select count(*) from performance_schema.replication_applier_status_by_worker] = 0;
source include/assert.inc;

--echo
--echo # Setup MTS and perform testing on a fresh replica.
--echo

--source include/sync_replica_sql_with_primary.inc
--connection replica

# PB2 runs the tests with replica-parallel-worker=4 in a combination.
# Reset it to 0 beacause the following test for empty set is valid only
# in non-MTS replica.

source include/stop_replica.inc;
SET @save_replica_parallel_workers=@@global.replica_parallel_workers;
SET @@global.replica_parallel_workers=0;
# to avoid warnings
set @save_replica_transaction_retries= @@global.replica_transaction_retries;
source include/start_replica.inc;

let $assert_text= In non-MTS mode(SQL thread), the table should return an empty set.;
let $assert_cond= [select count(*) from performance_schema.replication_applier_status_by_worker] = 0;
source include/assert.inc;

source include/stop_replica.inc;
SET @@global.replica_parallel_workers=1;
# to avoid warnings
set @save_replica_transaction_retries= @@global.replica_transaction_retries;
source include/start_replica.inc;

let $ps_value= query_get_value(select Worker_Id from performance_schema.replication_applier_status_by_worker, Worker_Id, 1);
let $assert_text= Worker_Id should be 1;
let $assert_cond= "$ps_value"= 1;
source include/assert.inc;

# To verify the correctness of thread_id field, we check for the name of
# the thread.

let $thread_name= `select name from performance_schema.threads where thread_id= (select Thread_Id from performance_schema.replication_applier_status_by_worker)`;
let $assert_text= thread_name should should indicate worker thread.;
let $assert_cond= "$thread_name" = "thread/sql/replica_worker";
source include/assert.inc;

let $ps_value= query_get_value(select Service_State from performance_schema.replication_applier_status_by_worker, Service_State, 1);
let $assert_text= Service_State should be "ON" on a fresh replica server.;
let $assert_cond= "$ps_value"= "ON";
source include/assert.inc;

let $ps_value= query_get_value(select Last_Seen_Transaction from performance_schema.replication_applier_status_by_worker, Last_Seen_Transaction, 1);
let $assert_text= Last_Seen_Transaction should show "" if no transaction applierd;
let $assert_cond= "$ps_value" = "";
source include/assert.inc;

--connection primary
CREATE TABLE t1 (a INT);
DROP TABLE t1;
--sync_replica_with_primary

let $ps_value= query_get_value(select Last_Seen_Transaction from performance_schema.replication_applier_status_by_worker, Last_Seen_Transaction, 1);
let $assert_text= Last_Seen_Transaction should show "ANONYMOUS" if last transaction was anonymous.;
let $assert_cond= "$ps_value" = "ANONYMOUS";
source include/assert.inc;

let $sss_value= query_get_value(SHOW REPLICA STATUS, Last_SQL_Errno, 1);
let $ps_value= query_get_value(select Last_Error_Number from performance_schema.replication_applier_status_by_worker, Last_Error_Number, 1);
let $assert_text= Value returned by SSS and PS table for Last_Error_Number should be same.;
let $assert_cond= "$sss_value" = "$ps_value";
source include/assert.inc;

let $sss_value= query_get_value(SHOW REPLICA STATUS, Last_SQL_Error, 1);
let $ps_value= query_get_value(select Last_Error_Message from performance_schema.replication_applier_status_by_worker, Last_Error_Message, 1);
let $assert_text= Value returned by SSS and PS table for Last_Error_Message should both be empty.;
let $assert_cond= "$sss_value" = "$ps_value";
source include/assert.inc;

let $sss_value= query_get_value(SHOW REPLICA STATUS, Last_SQL_Error_Timestamp, 1);
let $ps_value= query_get_value(select Last_Error_Timestamp from performance_schema.replication_applier_status_by_worker, Last_Error_Timestamp, 1);
let $assert_text= Value returned by PS table for Last_Error_Timestamp should be 0000-00-00 00:00:00.;
let $assert_cond= "$ps_value" = "0000-00-00 00:00:00";
source include/assert.inc;

--echo
--echo # Introduce an error in the worker thread and check for the correctness
--echo # of error number, message and timestamp fields.
--echo

# Cause an error in Worker thread.
# 1) Create a table 't' at primary, replicate at replica.
# 2) Drop table 't' at replica only.
# 3) Insert a value in table 't' on primary and replicate on replica.
# Since replica doesnt have table 't' anymore, worker thread will report an error.

--connection primary
use test;
create table t(a int primary key);
sync_replica_with_primary;
drop table t;
--connection primary
insert into t values(1);
--connection replica
let $replica_sql_errno=1146;
source include/wait_for_replica_sql_error.inc;

--echo
--echo # Extract the error related fields from SSS and PS table and compare
--echo # them for correctness.
--echo

let $sss_value= query_get_value(SHOW REPLICA STATUS, Last_SQL_Errno, 1);
let $ps_value= query_get_value(select Last_Error_Number from performance_schema.replication_applier_status_by_worker, Last_Error_Number, 1);
let $assert_text= Value returned by SSS and PS table for Last_Error_Number should be same.;
let $assert_cond= "$sss_value" = "$ps_value";
source include/assert.inc;

--disable_query_log
--replace_regex /primary-bin.[0-9]+/FILENAME/ /end_log_pos [0-9]+/end_log_pos POSITION/
select Last_Error_Message from performance_schema.replication_applier_status_by_worker;
--enable_query_log

# The timestamp format is slightly different in SSS and PS.
# SSS => YYMMDD HH:MM:SS
# PS  => YYYY-MM-DD HH:MM:SS
# To match the two, we get rid of hyphons from PS output and first two digits
# the year field so that it can be matched directly.

let $sss_value= query_get_value(SHOW REPLICA STATUS, Last_SQL_Error_Timestamp, 1);
let $ps_value= query_get_value(select Last_Error_Timestamp from performance_schema.replication_applier_status_by_worker, Last_Error_Timestamp, 1);
let $ps_value_without_hyphons= `SELECT REPLACE("$ps_value", '-', '')`;
let $ps_value_in_sss_format= `select substring("$ps_value_without_hyphons", 3)`;
let $assert_text= Value returned by SSS and PS table for Last_Error_Timestamp should be same.;
let $assert_cond= "$sss_value" = "$ps_value_in_sss_format";
source include/assert.inc;

--echo
--echo # Verify that the error fields are preserved after STOP REPLICA.
--echo

--echo
--echo # 1. Verify that thread_id changes to NULL and service_state to "off" on
--echo #    STOP REPLICA.
--echo

let $ps_value= query_get_value(select thread_id from performance_schema.replication_applier_status_by_worker, thread_id, 1);
let $assert_text= After STOP REPLICA, thread_id should be NULL;
let $assert_cond= "$ps_value" = "NULL";
source include/assert.inc;

let $ps_value= query_get_value(select Service_State from performance_schema.replication_applier_status_by_coordinator, Service_State, 1);
let $assert_text= So, Service_State after STOP REPLICA should be "OFF".;
let $assert_cond= "$ps_value"= "OFF";
source include/assert.inc;

--echo
--echo # 2. Extract the worker_id and the error related fields from SSS and PS
--echo #    table and compare them. These fields should preserve their values.
--echo

let $ps_value= query_get_value(select Worker_Id from performance_schema.replication_applier_status_by_worker, Worker_Id, 1);
let $assert_text= Worker_Id should be 1;
let $assert_cond= "$ps_value"= 1;
source include/assert.inc;

let $sss_value= query_get_value(SHOW REPLICA STATUS, Last_SQL_Errno, 1);
let $ps_value= query_get_value(select Last_Error_Number from performance_schema.replication_applier_status_by_worker, Last_Error_Number, 1);
let $assert_text= Value returned by SSS and PS table for Last_Error_Number should be same.;
let $assert_cond= "$sss_value" = "$ps_value";
source include/assert.inc;

--disable_query_log
--replace_regex /primary-bin.[0-9]+/FILENAME/ /end_log_pos [0-9]+/end_log_pos POSITION/
select Last_Error_Message from performance_schema.replication_applier_status_by_worker;
--enable_query_log

# The timestamp format is slightly different in SSS and PS.
# SSS => YYMMDD HH:MM:SS
# PS  => YYYY-MM-DD HH:MM:SS
# To match the two, we get rid of hyphons from PS output and first two digits
# the year field so that it can be matched directly.

let $sss_value= query_get_value(SHOW REPLICA STATUS, Last_SQL_Error_Timestamp, 1);
let $ps_value= query_get_value(select Last_Error_Timestamp from performance_schema.replication_applier_status_by_worker, Last_Error_Timestamp, 1);
let $ps_value_without_hyphons= `SELECT REPLACE("$ps_value", '-', '')`;
let $ps_value_in_sss_format= `select substring("$ps_value_without_hyphons", 3)`;
let $assert_text= Value returned by SSS and PS table for Last_Error_Timestamp should be same.;
let $assert_cond= "$sss_value" = "$ps_value_in_sss_format";
source include/assert.inc;

stop replica;
reset replica;
--connection primary
drop table t;
reset primary;

--echo
--echo # Set up replication in gtid-mode=on and test 'Last_Seen_Transaction'
--echo # field.
--echo

--let $rpl_skip_sync= 1
--let $rpl_set_enforce_gtid_consistency= 1
--source include/rpl_set_gtid_mode.inc
--let $rpl_skip_sync= 0

--connection replica
stop replica;
replace_result $PRIMARY_MYPORT PRIMARY_MYPORT;
replace_column 2 ####;
eval change primary to primary_host='127.0.0.1',primary_port=$PRIMARY_MYPORT, primary_user='root';
SET @@global.replica_parallel_workers=1;
# to avoid warnings
set @save_replica_transaction_retries= @@global.replica_transaction_retries;
start replica;

--connection primary
create database d1;
create table d1.t1(a int);
insert into d1.t1 values(1);
let $PRIMARY_UUID= query_get_value(`SHOW VARIABLES LIKE '%server_uuid%'`, Value, 1);

sync_replica_with_primary;

replace_result $PRIMARY_UUID PRIMARY_UUID;
query_vertical select Last_Seen_Transaction from performance_schema.replication_applier_status_by_worker;

--echo
--echo # Verify that the value in 'Last_Seen_Transaction' field is preserved
--echo # after STOP REPLICA.
--echo

source include/stop_replica.inc;
replace_result $PRIMARY_UUID PRIMARY_UUID;
query_vertical select Last_Seen_Transaction from performance_schema.replication_applier_status_by_worker;

--echo #
--echo # BUG#20513547 REPLICATION_APPLIER_STATUS_BY_WORKER SHOWS
--echo #              WRONG WORKER_ID WHEN REPLICA STOPS
--echo #
SET @@GLOBAL.replica_parallel_workers = 3;
--source include/start_replica.inc
SELECT worker_id from performance_schema.replication_applier_status_by_worker;
--source include/stop_replica.inc
SELECT worker_id from performance_schema.replication_applier_status_by_worker;

--echo
--echo # Cleanup.
--echo

--connection primary
DROP DATABASE d1;

--connection replica
set @@global.replica_parallel_workers= @save_replica_parallel_workers;
set @@global.replica_transaction_retries= @save_replica_transaction_retries;
source include/start_replica.inc;

--let $rpl_gtid_mode= OFF
--let $rpl_set_enforce_gtid_consistency= 0
--source include/rpl_set_gtid_mode.inc

source include/rpl_end.inc;
