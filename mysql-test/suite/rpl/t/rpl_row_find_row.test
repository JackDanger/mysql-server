# BUG#47312: RBR: Disabling key on replica breaks replication:
# HA_ERR_WRONG_INDEX
#
# Description
# ===========
#   
#   This test case checks whether disabling a key on a replica breaks
#   replication or not.
#   
#   Case #1, shows that while not using ALTER TABLE... DISABLE KEYS and
#   the replica has no key defined while the primary has one, replication
#   won't break.
#
#   Case #2, shows that before patch for BUG#47312, if defining key on
#   replica table, and later disable it, replication would break. This
#   has been fixed.
# 

-- source include/not_group_replication_plugin.inc
-- source include/have_binlog_format_row.inc
-- source include/have_myisam.inc
-- source include/primary-replica.inc

#
# Case #1: primary has key, but replica has not. 
#          Replication does not break.
# 

SET SQL_LOG_BIN=0;
CREATE TABLE t (a int, b int, c int, key(b));
SET SQL_LOG_BIN=1;

-- connection replica

CREATE TABLE t (a int, b int, c int);

-- connection primary

INSERT INTO t VALUES (1,2,4);
INSERT INTO t VALUES (4,3,4);
DELETE FROM t;

--source include/sync_replica_sql_with_primary.inc

-- connection primary
DROP TABLE t;

--source include/sync_replica_sql_with_primary.inc

#
# Case #2: primary has key, replica also has one, 
#          but it gets disabled sometime.
#          Replication does not break anymore.
# 
--source include/rpl_reset.inc
-- connection primary

CREATE TABLE t (a int, b int, c int, key(b)) ENGINE=MyISAM;

--source include/sync_replica_sql_with_primary.inc

ALTER TABLE t DISABLE KEYS;

-- connection primary

INSERT INTO t VALUES (1,2,4);
INSERT INTO t VALUES (4,3,4);
DELETE FROM t;

--source include/sync_replica_sql_with_primary.inc

-- connection primary
DROP TABLE t;

--source include/sync_replica_sql_with_primary.inc

#
# BUG#53889: replicas stops with 1032; handler error HA_ERR_KEY_NOT_FOUND
#
-- source include/rpl_reset.inc
-- connection primary

CREATE TABLE t2 (col4 CHAR(25) DEFAULT NULL,
                 col1 BIGINT,
                 col2 TINYINT NOT NULL,
                 col5 VARCHAR(25) DEFAULT ''
                ) ENGINE = myisam;

ALTER TABLE t2 ADD INDEX idx1 ( col4 ) , ADD UNIQUE INDEX idx2 ( col5 );
INSERT INTO t2 ( col4 , col2 ) VALUES ( 'Hello', -77 ) ;
UPDATE t2 SET col1 = 13 WHERE col2 = -77;
--source include/sync_replica_sql_with_primary.inc

-- let $diff_tables= primary:t2, replica:t2
-- source include/diff_tables.inc

-- connection primary
DROP TABLE t2;
--source include/sync_replica_sql_with_primary.inc

#
# BUG#53893: RBR: nullable unique key can lead to out-of-sync replica
#

#
# We insert two rows. Both with part of UNIQUE KEY set to null.
# Then we update the last row inserted. On primary the correct
# row is updated. On the replica the wrong row would be updated
# because the engine would look it up by the NULL Unique KEY.
# As a consquence, the wrong row would be updated.
#

-- source include/rpl_reset.inc
-- connection primary

CREATE TABLE t1 (c1 INT NOT NULL, c2 INT NOT NULL, c3 INT, UNIQUE KEY(c1,c3), KEY(c2));
INSERT INTO t1(c1,c2) VALUES(1,1);
INSERT INTO t1(c1,c2) VALUES(1,2);
UPDATE t1 SET c1=1000 WHERE c2=2;
--source include/sync_replica_sql_with_primary.inc

-- let $diff_tables= primary:t1, replica:t1
-- source include/diff_tables.inc

-- connection primary
DROP TABLE t1;

--source include/rpl_end.inc
