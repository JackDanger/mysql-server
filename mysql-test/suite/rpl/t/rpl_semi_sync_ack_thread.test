################################################################################
# WL#6630 Semisync separate acks collector
#
# In the worklog, a separate ack collector thread is added in semisync primary
# plugin. This test verifys  the ack collector thread can works as expected.
#
# The thread is created when semisync primary is enabled. and it is destroyed
# when semisync primary is disabled.
################################################################################
--source include/not_valgrind.inc
--source include/not_group_replication_plugin.inc
--source include/have_debug.inc
--source include/have_debug_sync.inc
--source include/have_innodb.inc

# server_1 is primary, others are replicas.
--let $rpl_topology= 1->2, 1->3, 1->4
--source include/rpl_init.inc

--let $rpl_connection_name= server_1
--source include/rpl_connection.inc
# Suppress warning:
# "Semi-sync primary failed on net_flush() before waiting for replica reply"
CALL mtr.add_suppression("Semi-sync primary failed on net_flush().*");

--echo ####################################################################
--echo # Test Case: semisync primary can be enabled and disabled sucessfully
--echo # without any live replica connection and also test ON, OFF can be set
--echo # more than once without problems.
--echo ####################################################################
--let $semisync_primary_enabled= OFF
--source include/install_semisync_primary.inc
SET GLOBAL rpl_semi_sync_primary_enabled= ON;
SET GLOBAL rpl_semi_sync_primary_enabled= ON;
SET GLOBAL rpl_semi_sync_primary_enabled= OFF;
SET GLOBAL rpl_semi_sync_primary_enabled= OFF;

--echo ####################################################################
--echo # Test Case: Semisync should work even semisync replicas are connected
--echo # before semisync primary enabled.
--echo ####################################################################
CREATE TABLE t1(c1 INT) ENGINE=InnoDB;
--source include/rpl_sync.inc

--let $rpl_connection_name= server_2
--source include/rpl_connection.inc
--source include/install_semisync_replica.inc

--let $rpl_connection_name= server_1
--source include/rpl_connection.inc
SET GLOBAL rpl_semi_sync_primary_enabled= ON;
--source extra/rpl_tests/rpl_semi_sync_ack_thread.inc

--echo ####################################################################
--echo # Test Case: Semisync should work when more than one semisync replicas
--echo # connectted.
--echo ####################################################################
--let $rpl_connection_name= server_3
--source include/rpl_connection.inc
--source include/install_semisync_replica.inc

--source extra/rpl_tests/rpl_semi_sync_ack_thread.inc

--let $rpl_connection_name= server_4
--source include/rpl_connection.inc
--source include/install_semisync_replica.inc

--source extra/rpl_tests/rpl_semi_sync_ack_thread.inc

--echo ###################################################################
--echo # Test Case: Semisync should work after semisync primary is disabled
--echo # and enabled again.
--echo ###################################################################
--let $rpl_connection_name= server_1
--source include/rpl_connection.inc

SET GLOBAL rpl_semi_sync_primary_enabled= OFF;
INSERT INTO t1 VALUES(0);
SET GLOBAL rpl_semi_sync_primary_enabled= ON;
--source extra/rpl_tests/rpl_semi_sync_ack_thread.inc

--echo ###################################################################
--echo # Test Case: Semisync should still work after some semisync replicas
--echo # reconnected
--echo ###################################################################
--let $rpl_connection_name= server_2
--source include/rpl_connection.inc
--source include/stop_replica_io.inc
--source include/start_replica_io.inc

--source extra/rpl_tests/rpl_semi_sync_ack_thread.inc

--let $rpl_connection_name= server_3
--source include/rpl_connection.inc
--source include/stop_replica_io.inc
--source include/start_replica_io.inc

--source extra/rpl_tests/rpl_semi_sync_ack_thread.inc

--echo ###################################################################
--echo # Test Case: Semisync should still work after some semisync replicas
--echo # disconnected
--echo ###################################################################
--let $rpl_connection_name= server_2
--source include/rpl_connection.inc
--source include/uninstall_semisync_replica.inc

--source extra/rpl_tests/rpl_semi_sync_ack_thread.inc

--let $rpl_connection_name= server_3
--source include/rpl_connection.inc
--source include/uninstall_semisync_replica.inc

--source extra/rpl_tests/rpl_semi_sync_ack_thread.inc

--echo #####################################################################
--echo # Test Case: PS threads table includes ACK thread's status correctly.
--echo #####################################################################

--echo #
--echo # Status: Waiting for semi-sync ACK from replica
--echo #

# It may still in ack reading state, but it should change to ack waiting state.
--let $wait_condition= SELECT count(*) = 1 FROM performance_schema.threads WHERE PROCESSLIST_STATE = 'Waiting for semi-sync ACK from replica'
--source include/wait_condition.inc

--let $rpl_connection_name= server_1
--source include/rpl_connection.inc
SELECT name, type, processlist_state FROM performance_schema.threads
  WHERE name LIKE "%Ack_receiver";

--echo #
--echo # Coverage Test:
--echo # It should print an error to log if select() function returns -1
--echo #

SET @save_debug = @@GLOBAL.debug;
SET GLOBAL debug = 'd,rpl_semisync_simulate_select_error';

# wait enough time to guarantee that select() timeout happens
--sleep 2

# It can still receive ACK from semi-sync replica
INSERT INTO t1 VALUES(1);

SET GLOBAL debug = @save_debug;

--echo #
--echo # Status: Waiting for semisync replica to connect
--echo #
--let $rpl_connection_name= server_4
--source include/rpl_connection.inc
--source include/uninstall_semisync_replica.inc

--let $rpl_connection_name= server_1
--source include/rpl_connection.inc
# It guarantees semisync replica 5 is alrealdy unregistered from semisync primary
CALL mtr.add_suppression("Timeout waiting for reply of binlog.*");
INSERT INTO t1 VALUES(1);
--save_primary_pos

--let $rpl_connection_name= server_4
--source include/rpl_connection.inc
--sync_with_primary

--let $rpl_connection_name= server_1
--source include/rpl_connection.inc
SELECT name, type, processlist_state FROM performance_schema.threads
  WHERE name LIKE "%Ack_receiver";

--echo #
--echo # Ack thread is stopped, it should be not in PS.threads table.
--echo #
SET GLOBAL rpl_semi_sync_primary_enabled= OFF;

--let $assert_text= ack receiver thread is destroied
--let $assert_cond= count(*) = 0 FROM performance_schema.threads WHERE name LIKE "%Ack_receiver"
--source include/assert.inc

--echo ############################################
--echo # Test Case: Coverage test on error branches
--echo ############################################
SET @save_debug = @@GLOBAL.debug;
CALL mtr.add_suppression("Failed to start semi-sync ACK receiver thread.*");
CALL mtr.add_suppression("Failed to register replica to semi-sync ACK receiver thread.*");
CALL mtr.add_suppression("Failed to stop ack receiver thread on my_thread_join.*");
CALL mtr.add_suppression("Run function 'transmit_start' .* failed");

SET GLOBAL rpl_semi_sync_primary_trace_level = 255;
--echo #
--echo # Failure on creating ack receiver thread
--echo #
SET GLOBAL debug = 'd,rpl_semisync_simulate_create_thread_failure';
SET GLOBAL rpl_semi_sync_primary_enabled= ON;

--let $assert_variable_name= rpl_semi_sync_primary_enabled
--let $assert_variable_value= 0
--source include/assert_variable.inc

--let $assert_text= ack receiver thread is destroied;
--let $assert_cond= count(*) = 0 FROM performance_schema.threads WHERE name LIKE "%Ack_receiver"
--source include/assert.inc

--echo #
--echo # Failure on stopping ack receive thread
--echo #

SET GLOBAL debug= @save_debug;
SET GLOBAL rpl_semi_sync_primary_enabled= ON;

SET GLOBAL debug = 'd,rpl_semisync_simulate_thread_join_failure';
SET GLOBAL rpl_semi_sync_primary_enabled= OFF;

--let $assert_variable_name= rpl_semi_sync_primary_enabled
--let $assert_variable_value= 0
--source include/assert_variable.inc

--let $assert_text= ack receiver thread is destroied
--let $assert_cond= count(*) = 0 FROM performance_schema.threads WHERE name LIKE "%Ack_receiver"
--source include/assert.inc

--echo #
--echo # Failure on registering semisync replica
--echo #
SET GLOBAL debug= 'd,rpl_semisync_simulate_add_replica_failure';
SET GLOBAL rpl_semi_sync_primary_enabled= ON;

--let $rpl_connection_name= server_2
--source include/rpl_connection.inc
--source include/stop_replica.inc
--let $save_retry_count= query_get_value(SHOW REPLICA STATUS, Primary_Retry_Count, 1)
--let $save_retry_time= query_get_value(SHOW REPLICA STATUS, Connect_Retry, 1)
CHANGE PRIMARY TO primary_retry_count = 1, primary_connect_retry = 5;

# Make IO thread hungs after connecting to primary. So we can make sure it is
# stopped by add_replica_failure
SET @save_debug= @@GLOBAL.debug;
SET GLOBAL debug= 'd,dbug.before_get_PRIMARY_UUID';
--source include/install_semisync_replica.inc

# Clear the debug point and signal IO thread to resume
SET GLOBAL debug= @save_debug;
SET debug_sync= 'now SIGNAL signal.get_primary_uuid';

# It should be stopped by add_replica failure
--source include/wait_for_replica_io_to_stop.inc

eval CHANGE PRIMARY TO primary_retry_count = $save_retry_count,
                      primary_connect_retry = $save_retry_time;

--source include/uninstall_semisync_replica.inc
--source include/start_replica_sql.inc

--let $rpl_connection_name= server_1
--source include/rpl_connection.inc
DROP TABLE t1;
--source include/rpl_sync.inc

SET GLOBAL debug= @save_debug;
--source include/uninstall_semisync_primary.inc
--source include/rpl_end.inc
