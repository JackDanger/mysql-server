##############################################################################
# WL#4677 Unique Server Ids for Replication Topology (UUIDs)                 #
#
# Primary and replica exchange their UUID each other when connecting. Primary's
# UUID is set into the result of 'SHOW REPLICA STATUS' and stored into
# primary.info file. Replica's UUID appears in the result of 'SHOW REPLICA HOSTS'.
# Replica and primary cannot have the same UUID, except
# --replicate-same-server-id is set.
#
##############################################################################
# Does not work with GTIDs because it uses replicate-same-server-id to
# replicate from one server to itself.
--source include/not_gtid_enabled.inc
--source include/no_valgrind_without_big.inc
# This test case is binlog_format agnostic
--source include/have_binlog_format_mixed.inc
--source include/have_debug.inc
--source include/have_debug_sync.inc

--let $rpl_server_count= 3
--source include/primary-replica.inc

call mtr.add_suppression("Replica I/O thread .* register on primary");
call mtr.add_suppression("Replica I/O: Primary command COM_REGISTER_REPLICA failed: .*");
CALL mtr.add_suppression(".*primary and replica have equal MySQL server UUIDs.*");
CALL mtr.add_suppression("Primary's UUID has changed, although this should not happen unless you have changed it manually");
CALL mtr.add_suppression("Replica I/O: SET @primary_heartbeat_period to primary failed with error: Lost connection to MySQL server during query");
CALL mtr.add_suppression("Notifying primary by SET @primary_binlog_checksum= @@global.binlog_checksum failed with error");
CALL mtr.add_suppression("A replica with the same server_uuid as this replica has connected to the primary");

--let $uuid_file= auto.cnf

--let $primary_datadir=`SELECT @@DATADIR`
# Sync suppressions
--source include/sync_replica_sql_with_primary.inc
--let $replica_datadir=`SELECT @@DATADIR`

connection server_3;
--let $server_3_datadir=`SELECT @@DATADIR`

connection primary;
--let $original_primary_uuid=query_get_value(SELECT @@SERVER_UUID, @@SERVER_UUID, 1)
--copy_file $primary_datadir/$uuid_file $primary_datadir/original_$uuid_file

--echo
--echo # Case 1:
--echo # Primary's UUID appears in the result of 'SHOW REPLICA STATUS'.
--echo # Replica's UUID appears in the result of 'SHOW REPLICA HOSTS'.
--echo -----------------------------------------------------------------------------

--let $assert_cond= "[primary:SELECT @@SERVER_UUID AS a, a, 1]" = "[replica:SHOW REPLICA STATUS, Primary_UUID, 1]"
--let $assert_text= "Replica's SHOW REPLICA HOST should contain the correct value for primary's server_uuid
--source include/assert.inc

--let $assert_cond= "[primary:SHOW REPLICA HOSTS, Replica_UUID, 1]" = "[replica:SHOW VARIABLES LIKE "SERVER_UUID", Value, 1]"
--let $assert_text= Primary's SHOW REPLICA HOSTS should contain the correct value for replica's server_uuid
--source include/assert.inc

connection replica;

--echo 
--echo # Case 2: 
--echo # After executing 'STOP REPLICA [IO_THREAD|SQL_THREAD]' successfully, Primary's UUID
--echo # is still kept into Replica status.
--echo -----------------------------------------------------------------------------
--source include/stop_replica_io.inc
source include/check_replica_param.inc;

--source include/stop_replica_sql.inc
--source include/check_replica_param.inc

--source include/start_replica.inc
--source include/stop_replica.inc
source include/check_replica_param.inc;

--echo
--echo # Case 3:
--echo # Replica generates an error and aborts, if primary's UUID is
--echo # equal to replica's UUID unless --replicate-same-server-id
--echo # option is set.
--echo -----------------------------------------------------------------------------
connection primary;
# copy replica's server_properties file to primary, so primary will have a same
# UUID as replica.
--remove_file $primary_datadir/$uuid_file
--copy_file $replica_datadir/$uuid_file $primary_datadir/$uuid_file
--let $rpl_server_number= 1
--source include/rpl_restart_server.inc

connection replica;
START REPLICA IO_THREAD;

let $show_statement= SHOW REPLICA STATUS;
--let $replica_io_errno= 1593
--source include/wait_for_replica_io_error.inc

connection primary;
--remove_file $primary_datadir/$uuid_file
--copy_file $server_3_datadir/$uuid_file $primary_datadir/$uuid_file
--let $rpl_server_number= 1
--source include/rpl_restart_server.inc
--let $primary_log_file= query_get_value(SHOW PRIMARY STATUS, 'File', 1)
--let $primary_log_pos= query_get_value(SHOW PRIMARY STATUS, 'Position', 1)

--echo 
--echo # server_3 is running with --replicate-same-server-id option 
connection server_3;
--replace_result $PRIMARY_MYPORT PRIMARY_PORT
--replace_column 2 ####
eval CHANGE PRIMARY TO PRIMARY_HOST= '127.0.0.1',
     PRIMARY_PORT= $PRIMARY_MYPORT,
     PRIMARY_USER= 'root',
     PRIMARY_LOG_FILE='primary-bin.000001';
--source include/start_replica.inc
--source include/check_replica_no_error.inc

connection primary;
--let $sync_replica_connection= server_3
--source include/sync_replica_sql_with_primary.inc
--source include/stop_replica.inc

connection primary;
--remove_file $primary_datadir/$uuid_file
--move_file $primary_datadir/original_$uuid_file $primary_datadir/$uuid_file
--let $rpl_server_number= 1
--source include/rpl_restart_server.inc

--echo
--echo # Case 4:
--echo # When executing 'CHANGE PRIMARY ...', primary's UUID and server_id will be
--echo # cleared if primary_host or/and primary_port are changed.
--echo # Primary's UUID and server_id will not be cleared if both primary_port
--echo # and primary_host are not changed.
--echo -----------------------------------------------------------------------------
connection replica;
START REPLICA IO_THREAD;
--let $replica_param= Primary_UUID
--let $replica_param_value= $original_primary_uuid
--source include/wait_for_replica_param.inc

--source include/stop_replica.inc

--echo
--echo # Only change PRIMARY_PORT
let $old_primary_log_file= query_get_value(SHOW REPLICA STATUS, Primary_Log_File, 1);
let $old_primary_log_pos= query_get_value(SHOW REPLICA STATUS, Read_Primary_Log_Pos, 1);

CHANGE PRIMARY TO PRIMARY_PORT= 1111;
--let $replica_param= Primary_UUID
--let $replica_param_value= 
--source include/check_replica_param.inc
--let $replica_param= Primary_Server_Id
--let $replica_param_value= 0
--source include/check_replica_param.inc

--replace_result $old_primary_log_file PRIMARY_LOG_FILE $PRIMARY_MYPORT PRIMARY_PORT $old_primary_log_pos PRIMARY_POS
eval CHANGE PRIMARY TO PRIMARY_PORT= $PRIMARY_MYPORT,
       PRIMARY_LOG_FILE= '$old_primary_log_file', PRIMARY_LOG_POS= $old_primary_log_pos;
START REPLICA IO_THREAD;
--let $replica_param= Primary_UUID
--let $replica_param_value= $original_primary_uuid
--source include/wait_for_replica_param.inc

--echo
--echo # Only change PRIMARY_HOST
STOP REPLICA IO_THREAD;
--source include/wait_for_replica_io_to_stop.inc
let $old_primary_log_file= query_get_value(SHOW REPLICA STATUS, Primary_Log_File, 1);
let $old_primary_log_pos= query_get_value(SHOW REPLICA STATUS, Read_Primary_Log_Pos, 1);

CHANGE PRIMARY TO PRIMARY_HOST= 'localhost';
--let $replica_param= Primary_UUID
--let $replica_param_value=
--source include/check_replica_param.inc
--let $replica_param= Primary_Server_Id
--let $replica_param_value= 0
--source include/check_replica_param.inc

--replace_result $old_primary_log_file PRIMARY_LOG_FILE $PRIMARY_MYPORT PRIMARY_PORT $old_primary_log_pos PRIMARY_POS
eval CHANGE PRIMARY TO PRIMARY_HOST= '127.0.0.1',
       PRIMARY_LOG_FILE= '$old_primary_log_file', PRIMARY_LOG_POS= $old_primary_log_pos;
START REPLICA IO_THREAD;
--let $replica_param= Primary_UUID
--let $replica_param_value= $original_primary_uuid
--source include/wait_for_replica_param.inc

--echo
--echo # Both PRIMARY_HOST and PRIMARY_PORT are changed
STOP REPLICA IO_THREAD;

--source include/wait_for_replica_io_to_stop.inc
CHANGE PRIMARY TO PRIMARY_HOST= '127.0.0.1', PRIMARY_PORT= 1111;
--let $replica_param= Primary_UUID
--let $replica_param_value=
--source include/check_replica_param.inc
--let $replica_param= Primary_Server_Id
--let $replica_param_value= 0
--source include/check_replica_param.inc

--replace_result $old_primary_log_file PRIMARY_LOG_FILE $PRIMARY_MYPORT PRIMARY_PORT $old_primary_log_pos PRIMARY_POS
eval CHANGE PRIMARY TO PRIMARY_HOST= '127.0.0.1', PRIMARY_PORT= $PRIMARY_MYPORT,
       PRIMARY_LOG_FILE= '$old_primary_log_file', PRIMARY_LOG_POS= $old_primary_log_pos;
START REPLICA IO_THREAD;
--let $replica_param= Primary_UUID
--let $replica_param_value= $original_primary_uuid
--source include/wait_for_replica_param.inc

--echo
--echo # Both PRIMARY_HOST and PRIMARY_PORT are NOT changed
STOP REPLICA IO_THREAD;
--source include/wait_for_replica_io_to_stop.inc

--replace_result $PRIMARY_MYPORT PRIMARY_PORT
eval CHANGE PRIMARY TO PRIMARY_HOST= '127.0.0.1', PRIMARY_PORT= $PRIMARY_MYPORT;
--source include/check_replica_param.inc

--replace_result $old_primary_log_file PRIMARY_LOG_FILE $PRIMARY_MYPORT PRIMARY_PORT $old_primary_log_pos PRIMARY_POS
eval CHANGE PRIMARY TO 
       PRIMARY_LOG_FILE= '$old_primary_log_file', PRIMARY_LOG_POS= $old_primary_log_pos;
--source include/check_replica_param.inc

--echo
--echo # Case 5:
--echo # After executing 'RESET REPLICA' successfully, Primary's UUID is still kept 
--echo # into Replica status.
--echo -----------------------------------------------------------------------------
connection replica;
RESET REPLICA;
--source include/check_replica_param.inc

--replace_result $old_primary_log_file PRIMARY_LOG_FILE $PRIMARY_MYPORT PRIMARY_PORT $old_primary_log_pos PRIMARY_POS
eval CHANGE PRIMARY TO 
       PRIMARY_LOG_FILE= '$old_primary_log_file', PRIMARY_LOG_POS= $old_primary_log_pos;
--source include/start_replica.inc

--echo
--echo # Case 6:
--echo # In an existing primary-replica replication forum (M->S1), if another
--echo # replica (S2) with the same UUID as S1 joins the forum and connects
--echo # to Primary(M), the primary will throw an error to the first replica
--echo # connection that will not try to reconnect.
--echo -----------------------------------------------------------------------------

# Get current server_2 thread_id at primary
--connection server_1
--let $replica_thread_id= query_get_value(SELECT ID FROM INFORMATION_SCHEMA.PROCESSLIST WHERE COMMAND='Binlog Dump', ID, 1)

# Step-1: Copy server 2(S1)'s auto.cnf into server 3 (S2)'s data directory.
--connection server_2
--let $datadir2=`select @@datadir`
-- connection server_3
--let $datadir3=`select @@datadir`
--copy_file $datadir3/auto.cnf $datadir3/auto_backup.cnf
--remove_file $datadir3/auto.cnf
--copy_file $datadir2/auto.cnf $datadir3/auto.cnf

# Step-2: Restart the server 3 (two servers with the same UUID)
--let $rpl_server_number= 3
--source include/rpl_restart_server.inc
# Notice that the other replica has stopped with an error
--let $rpl_connection_name= server_2
--source include/rpl_connection.inc
--let $replica_io_errno= convert_error(ER_PRIMARY_FATAL_ERROR_READING_BINLOG)
--source include/wait_for_replica_io_error.inc

--let $assert_file=$MYSQLTEST_VARDIR/log/mysqld.1.err
# Grep only after the message that the server_2 has connected to the primary
--let $assert_only_after=Start binlog_dump to primary_thread_id\($replica_thread_id\)
--let $assert_count= 1
--let $assert_select=found a zombie dump thread with the same UUID
--let $assert_text= Found the expected line in primary's error log for server 2 disconnection
--source include/assert_grep.inc

# Get current server_3 thread_id at primary
--connection server_1
--let $replica_thread_id= query_get_value(SELECT ID FROM INFORMATION_SCHEMA.PROCESSLIST WHERE COMMAND='Binlog Dump', ID, 1)

# Step-3: Connect server 2 and notice that the replica server 3 will error
--connection server_2
--source include/start_replica_io.inc
# Notice that the other replica has stopped with an error
--let $rpl_connection_name= server_3
--source include/rpl_connection.inc
--let $replica_io_errno= convert_error(ER_PRIMARY_FATAL_ERROR_READING_BINLOG)
--source include/wait_for_replica_io_error.inc

# Grep only after the message that the server_3 has connected to the primary
--let $assert_only_after=Start binlog_dump to primary_thread_id\($replica_thread_id\)
--let $assert_text= Found the expected line in primary's error log for server 3 disconnection
--source include/assert_grep.inc

# Step-4: Check for error messages on replicas
--let $assert_file=$MYSQLTEST_VARDIR/log/mysqld.2.err
# Assert only the occurrences after the last CHANGE PRIMARY
--let $assert_only_after=CHANGE PRIMARY .* executed
--let $assert_select= Replica .* Got fatal error .* from primary .* replica with the same server_uuid as this replica
--let $assert_text= Found the expected line in server 2 error log
--source include/assert_grep.inc

--let $assert_file=$MYSQLTEST_VARDIR/log/mysqld.3.err
--let $assert_text= Found the expected line in server 3 error log
--source include/assert_grep.inc

# Cleanup (restore the server 3's auto.cnf back to proper one and restart)
--remove_file $datadir3/auto.cnf
--copy_file $datadir3/auto_backup.cnf $datadir3/auto.cnf
--remove_file $datadir3/auto_backup.cnf
--let $rpl_server_number= 3
--source include/rpl_restart_server.inc
--source include/stop_replica.inc
--source include/rpl_end.inc
