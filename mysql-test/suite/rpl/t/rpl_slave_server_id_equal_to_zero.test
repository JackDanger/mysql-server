# ==== Purpose ====
#
# This test case verify if a server will throw the proper error when
# trying to configure it as a replica and start replica's threads when it's
# server-id is 0.
#
# The "Part One" of the test case will have a replica started with
# server_id > 0 but will be tested also after setting @@GLOBAL.server_id
# to 0.
#
# The "Part Two" of the test case will have a replica started with
# server_id = 0 but will be tested also after setting @@GLOBAL.server_id
# to a value greater than 0.
#
# Both parts are testing the default replication channel and a new
# replication channel in order to evaluate also the multi source replica.
#
# ==== Related Bugs and Worklogs ====
#
# BUG#20753463 HANDLE_FATAL_SIGNAL (SIG=11) IN __STRLEN_SSE2_PMINUB ON
#              CHANGE PRIMARY
#
# This test case is binlog format agnostic
--source include/have_binlog_format_row.inc
# This test case does not depend on GTID
--source include/not_gtid_enabled.inc
--source include/primary-replica.inc

# Assert that the replica was started with server_id > 0
--source include/rpl_connection_replica.inc
CALL mtr.add_suppression('Server id not set, will not start replica');
CALL mtr.add_suppression('Replica is not configured or failed to initialize properly');
--let $assert_text= replica's server_id was greater than 0 at startup
--let $assert_cond= [ SELECT @@GLOBAL.server_id > 0 ]
--source include/assert.inc
--let $original_replica_server_id= `SELECT @@GLOBAL.server_id`

# Replication runs fine
--source include/rpl_connection_primary.inc
CREATE TABLE t1 (c1 INT) ENGINE=InnoDB;
--source include/sync_replica_sql_with_primary.inc

##
## Part One: Server initialized replica at startup (server_id > 0)
##

# Change replica @@GLOBAL.server_id to 0
--source include/stop_replica.inc
SET @@GLOBAL.server_id= 0;

# Start replica should fail
--error ER_BAD_REPLICA
START REPLICA;

# Assert that the reason of the failure was the server_id=0
--let $assert_file=$MYSQLTEST_VARDIR/log/mysqld.2.err
--let $assert_text= Replica didn't started because of server_id=0
--let $assert_select= \[ERROR\] Server id not set, will not start replica for channel \'\'
--let $assert_count= 1
--let $assert_only_after= rpl_replica_server_id_equal_to_zero
--source include/assert_grep.inc

# Change primary still works
CHANGE PRIMARY TO PRIMARY_LOG_POS=4;

# Start replica for channel should fail
--error ER_REPLICA_CHANNEL_DOES_NOT_EXIST
START REPLICA FOR CHANNEL 'any_channel';

# Change primary still works and will create the channel
CHANGE PRIMARY TO PRIMARY_LOG_POS=4, PRIMARY_HOST='127.0.0.1' FOR CHANNEL 'any_channel';

# Start replica for channel should fail
--error ER_BAD_REPLICA
START REPLICA FOR CHANNEL 'any_channel';

# Assert that the reason of the failure was the server_id=0
--let $assert_text= Replica for channel didn't started because of server_id=0
--let $assert_select= \[ERROR\] Server id not set, will not start replica for channel \'any_channel\'
--let $assert_count= 1
--source include/assert_grep.inc

# Remove the created channel
RESET REPLICA ALL FOR CHANNEL 'any_channel';

# Remove the t1 table on replica to allow it to be replicated again
DROP TABLE t1;

# Restore replica's server_id and start replica again
--eval SET @@GLOBAL.server_id= $original_replica_server_id
--source include/start_replica.inc
--source include/rpl_connection_primary.inc
--source include/sync_replica_sql_with_primary.inc

##
## Part Two: Server didn't initialized replica at startup (server_id = 0)
##

# Restart the replica with server_id=0
--let $rpl_server_number= 2
--let $rpl_server_parameters= --server-id=0
--source include/rpl_restart_server.inc

# Assert that the replica was started with server_id=0
--source include/rpl_connection_replica.inc
--let $assert_text= replica's server_id was 0 at startup
--let $assert_cond= [ SELECT @@GLOBAL.server_id = 0 ]
--source include/assert.inc

# Start replica should fail as not configured
--error ER_REPLICA_CONFIGURATION
START REPLICA;

# Change primary should fail as replica not configured
--error ER_REPLICA_CONFIGURATION
CHANGE PRIMARY TO PRIMARY_LOG_POS=4;

# Start replica for channel should fail as not configured
--error ER_REPLICA_CONFIGURATION
START REPLICA FOR CHANNEL 'any_channel';

# Change primary for channel should fail as replica not configured
--error ER_REPLICA_CONFIGURATION
CHANGE PRIMARY TO PRIMARY_LOG_POS=4 FOR CHANNEL 'any_channel';

# Set original replica's server_id into @@GLOBAL.server_id
--eval SET @@GLOBAL.server_id= $original_replica_server_id

# Start replica should still fail as not configured
--error ER_REPLICA_CONFIGURATION
START REPLICA;

# Change primary should still fail as replica not configured
--error ER_REPLICA_CONFIGURATION
CHANGE PRIMARY TO PRIMARY_LOG_POS=4;

# Start replica for channel should still fail as not configured
--error ER_REPLICA_CONFIGURATION
START REPLICA FOR CHANNEL 'any_channel';

# Change primary for channel should still fail as replica not configured
--error ER_REPLICA_CONFIGURATION
CHANGE PRIMARY TO PRIMARY_LOG_POS=4 FOR CHANNEL 'any_channel';
##
## Cleanup
##

# Restart the replica with server_id=2
--let $rpl_server_number= 2
--let $rpl_server_parameters= --server-id=2
--source include/rpl_restart_server.inc

# Restart the replica to allow the test case to sync when finishing
--source include/rpl_connection_replica.inc
--source include/start_replica.inc

# Primary cleanup
--source include/rpl_connection_primary.inc
DROP TABLE t1;
--source include/rpl_end.inc
