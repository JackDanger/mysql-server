# ==== Purpose ====
#
# This test verifies correctness and effectiveness of the
# until-stopping when the position used is inside the Gtid_log_event
# of a group (transaction) in the relaylog.
#
# ==== Method ====
#
# The test will create a two events transaction (GTID + QUERY), and will start
# the SQL thread using the UNTIL PRIMARY_LOG_FILE/POS clause, pointing to the
# first byte of the created transaction (inside of the Gtid_log_event).
#
# The test expects that, after issuing the START REPLICA SQL_THREAD with the
# UNTIL clause, the SQL thread will apply the created transaction (both
# GTID and QUERY events) even though pointing to stop after the GTID.
# The test also expects that the SQL thread will update its position
# before stopping.
#
# The test will then verify SQL thread's binlog file, position, and
# finally will wait for the SQL thread to stop.
#
# When the SQL thread stops, the test verifies if the second event of
# the transaction (QUERY) was successfully applied.
#
# ==== Related bugs ====
#
# Bug #18306199 START REPLICA UNTIL PRIMARY_LOG_POS=MIDDLE-OF-GTID-EVENT
#               STOPS BEFORE TRANSACTION

--source include/have_binlog_format_statement.inc
--source include/have_gtid.inc
--source include/primary-replica.inc

# Stop the SQL thread
--source include/rpl_connection_replica.inc
--source include/stop_replica_sql.inc

--echo # Saving primary position to use on UNTIL clause of START REPLICA
--source include/rpl_connection_primary.inc
--let $primary_file= query_get_value(SHOW PRIMARY STATUS, File, 1)
--let $primary_pos= query_get_value(SHOW PRIMARY STATUS, Position, 1)
--inc $primary_pos

# Create a table in the primary (one event without GTIDS, two with GTIDS)
CREATE TABLE t1 (a INT) ENGINE=InnoDB;

# Insert some data
BEGIN;
INSERT INTO t1 VALUES (1);
COMMIT;

# Sync the IO thread with the primary
--source include/sync_replica_io_with_primary.inc

# Check if SQL thread stops correctly
# after executing the next event of the primary binlog
# based on primary binlog file and position

--echo # Start SQL thread until it executed the CREATE TABLE
--replace_result $primary_file PRIMARY_FILE $primary_pos PRIMARY_POS
# Disable warnings to avoid logging "UNTIL condtion is not supported ..." on MTS
--disable_warnings
eval START REPLICA SQL_THREAD UNTIL PRIMARY_LOG_FILE = "$primary_file", PRIMARY_LOG_POS = $primary_pos;
--enable_warnings

--echo # Wait until SQL thread reaches last primary binlog file
--let $replica_param= Relay_Primary_Log_File
--let $replica_param_value= $primary_file
--let $replica_param_comparison= =
--source include/wait_for_replica_param.inc

--echo # Wait until SQL thread reaches desired primary binlog position
--let $replica_param= Exec_Primary_Log_Pos
--let $replica_param_value= $primary_pos
--let $replica_param_comparison= >=
--source include/wait_for_replica_param.inc

--echo # If the desired position was reached, SQL thread should stop.
--source include/wait_for_replica_sql_to_stop.inc

--let $assert_cond= "[SHOW TABLES LIKE "t1"]" = "t1"
--let $assert_text= t1 should be replicated
--source include/assert.inc

# Cleanup
--source include/start_replica_sql.inc
--source include/rpl_connection_primary.inc
DROP TABLE t1;

# End of tests
--source include/rpl_end.inc
