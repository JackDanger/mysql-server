# ==== Purpose ====
# Testing that temporary error is processed
# when the replica info repository type is TABLE.
#
# ==== Implementation ====
# At applying a transaction the replica applier thread is made blocked
# to time out. Upon a few retries, zero included,
# the temporary error gets escalated to the regular and the replica applier stops.
# After the blocking condition is removed the restarted applier
# succeeds.
#
# ==== References ====
# BUG#21095969 RPL+LOCK_WAIT_TIMEOUT: BOOL TRANS_CHECK_STATE ASSERTS
# `THD->GET_TRANSACTION()..`

# This test case is binary log format agnostic though.
--source include/have_binlog_format_row.inc
--source include/not_mts_replica_parallel_workers.inc
--source include/not_group_replication_plugin.inc

--source include/primary-replica.inc

--source include/rpl_connection_primary.inc
CREATE TABLE t1 (c1 INT PRIMARY KEY, c2 INT) ENGINE= InnoDB;

--sync_replica_with_primary
--source include/stop_replica.inc
SET @saved_replica_transaction_retries = @@GLOBAL.replica_transaction_retries;
SET @saved_innodb_lock_wait_timeout = @@GLOBAL.innodb_lock_wait_timeout;
SET @saved_primary_info_repository = @@GLOBAL.primary_info_repository;
SET @saved_relay_log_info_repository = @@GLOBAL.relay_log_info_repository;
SET @@GLOBAL.innodb_lock_wait_timeout = 1;
--let $repo_type_name = 'TABLE'
--replace_result $repo_type_name TYPE
--eval SET @@GLOBAL.primary_info_repository = $repo_type_name
--replace_result $repo_type_name TYPE
--eval SET @@GLOBAL.relay_log_info_repository = $repo_type_name

# To block the SQL thread
--source include/rpl_connection_replica1.inc
BEGIN;
INSERT INTO t1 VALUES (7,0);

# Generate data at the primary to be replicated
--source include/rpl_connection_primary.inc
INSERT INTO t1 VALUES (7,7);

# Retry 0 and 1 time to test both execution branches.

--let $retry_counted = 0
--let $retry_number = 0
while ($retry_number < 2)
{
  --source include/rpl_connection_replica.inc
  --eval SET @@GLOBAL.replica_transaction_retries = $retry_number
  --source include/start_replica.inc

  --echo ### Specified retry number is expected ###

  # Notice the status var accumulates retries over the loop
  --let $retry_counted = `SELECT $retry_counted + $retry_number`
  --let $status_var = Replica_retried_transactions
  --let $status_var_value = $retry_counted
  --source include/wait_for_status_var.inc

  --echo ### Timeout error is expected ###

  --let $replica_sql_errno= convert_error(ER_LOCK_WAIT_TIMEOUT)
  --source include/wait_for_replica_sql_error.inc

  --inc $retry_number
}

--source include/rpl_connection_replica1.inc
ROLLBACK;

--echo #### Cleanup ####

--source include/rpl_connection_replica.inc
--source include/stop_replica.inc
SET @@GLOBAL.replica_transaction_retries = @saved_replica_transaction_retries;
SET @@GLOBAL.primary_info_repository = @saved_primary_info_repository;
SET @@GLOBAL.relay_log_info_repository = @saved_relay_log_info_repository;
SET @@GLOBAL.innodb_lock_wait_timeout = @saved_innodb_lock_wait_timeout ;
--source include/start_replica.inc

--source include/rpl_connection_primary.inc
DROP TABLE t1;
--source include/rpl_end.inc
