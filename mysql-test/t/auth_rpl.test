--source include/have_plugin_auth.inc
--source include/not_embedded.inc
--source include/primary-replica.inc

#
# Check that replication replica can connect to primary using an account
# which authenticates with an external authentication plugin (bug#12897501).

#
# First stop the replica to guarantee that nothing is replicated.
#
--connection replica
--echo [connection replica]
--source include/stop_replica.inc
#
# Create an replication account on the primary.
#
--connection primary
--echo [connection primary]
CREATE USER 'plug_user' IDENTIFIED WITH 'test_plugin_server' AS 'plug_user';
GRANT REPLICATION REPLICA ON *.* TO plug_user;
FLUSH PRIVILEGES;

#
# Now go to replica and change the replication user.
#
--connection replica
--echo [connection replica]
--let $primary_user= query_get_value(SHOW REPLICA STATUS, Primary_User, 1)
--replace_column 2 ####
CHANGE PRIMARY TO 
  PRIMARY_USER=     'plug_user',
  PRIMARY_PASSWORD= 'plug_user',
  PRIMARY_RETRY_COUNT= 0;

#
# Start replica with new replication account - this should trigger connection
# to the primary server.
#
--source include/start_replica.inc

# Replicate all statements executed on primary, in this case,
# (creation of the plug_user account).
#
--connection primary
--sync_replica_with_primary
--echo # Replica in-sync with primary now.

SELECT user, plugin, authentication_string FROM mysql.user WHERE user LIKE 'plug_user';

#
# Now we can stop the replica and clean up.
#
# Note: it is important that replica is stopped at this
# moment - otherwise primary's cleanup statements
# would be replicated on replica!
#
--echo # Cleanup (on replica).
--source include/stop_replica.inc
--replace_column 2 ####
eval CHANGE PRIMARY TO PRIMARY_USER='$primary_user';
DROP USER 'plug_user';

--echo # Cleanup (on primary).
--connection primary
DROP USER 'plug_user';

--let $rpl_only_running_threads= 1
--source include/rpl_end.inc
